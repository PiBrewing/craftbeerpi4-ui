[{"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/index.js":"1","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/reportWebVitals.js":"2","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/App.js":"3","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/alert/AlertProvider.js":"4","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/index.js":"5","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/ActorForm.js":"6","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/KettleForm.js":"7","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/StepForm.js":"8","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/SensorForm.js":"9","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/RecipeEditor.js":"10","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/Dashboard.js":"11","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/PrivateRoute.js":"12","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Menu.js":"13","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/notificationapi.js":"14","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/index.js":"15","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/index.js":"16","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/index.js":"17","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/about/index.js":"18","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/plugins/index.js":"19","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/settings/index.js":"20","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/charting/index.js":"21","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/actorapi.js":"22","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/websocket.js":"23","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/sensorapi.js":"24","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/kettleapi.js":"25","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorTypeSelect.js":"26","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardContext.js":"27","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/icons/CBPiSensorIcon.js":"28","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/SensorTable.js":"29","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/SortButton.js":"30","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/KettleSelect.js":"31","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/logapi.js":"32","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/GlobalKeyPress.js":"33","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/Elements.js":"34","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardWidgetList.js":"35","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/DeleteDialog.js":"36","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/dashboardapi.js":"37","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardLayer.js":"38","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/config.js":"39","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Path.js":"40","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorValue.js":"41","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/arraymove.js":"42","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/WidgetSelect.js":"43","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorSelect.js":"44","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SelectInput.js":"45","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Text.js":"46","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/TargetTemp.js":"47","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/SensorData.js":"48","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Liquid.js":"49","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Steps.js":"50","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Led.js":"51","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/KettleControl.js":"52","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/CustomSVG.js":"53","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Clock.js":"54","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Chart.js":"55","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Calculator.js":"56","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/PropsEdit.js":"57","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorName.js":"58","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/MashControl.js":"59","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/KettleName.js":"60","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorName.js":"61","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/stepapi.js":"62","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Button.js":"63","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorSelect.js":"64","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/configapi.js":"65","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/NewRecipeDialog.js":"66","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/recipeapi.js":"67","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Header.js":"68","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/KettleTable.js":"69","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/StepStateChip.js":"70","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/ActorTable.js":"71","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/CloneRecipeDialog.js":"72","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/MashStepList.js":"73","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/BasicData.js":"74","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/StepTypeSelect.js":"75","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/LogicSelect.js":"76","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorTypeSelect.js":"77","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorValue.js":"78","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorSwitch.js":"79","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorButton.js":"80","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Title.js":"81"},{"size":1467,"mtime":1616176554851,"results":"82","hashOfConfig":"83"},{"size":362,"mtime":1616176554851,"results":"84","hashOfConfig":"83"},{"size":7293,"mtime":1616237547474,"results":"85","hashOfConfig":"83"},{"size":2999,"mtime":1616176554831,"results":"86","hashOfConfig":"83"},{"size":7133,"mtime":1616176554835,"results":"87","hashOfConfig":"83"},{"size":4132,"mtime":1616176554836,"results":"88","hashOfConfig":"83"},{"size":4903,"mtime":1616176554837,"results":"89","hashOfConfig":"83"},{"size":4547,"mtime":1616176554837,"results":"90","hashOfConfig":"83"},{"size":4079,"mtime":1616176554837,"results":"91","hashOfConfig":"83"},{"size":3357,"mtime":1616176554839,"results":"92","hashOfConfig":"83"},{"size":293,"mtime":1616176554831,"results":"93","hashOfConfig":"83"},{"size":1315,"mtime":1616176554841,"results":"94","hashOfConfig":"83"},{"size":1820,"mtime":1616176554841,"results":"95","hashOfConfig":"83"},{"size":434,"mtime":1616176554836,"results":"96","hashOfConfig":"83"},{"size":2414,"mtime":1616176554837,"results":"97","hashOfConfig":"83"},{"size":5890,"mtime":1616176554838,"results":"98","hashOfConfig":"83"},{"size":3491,"mtime":1616176554839,"results":"99","hashOfConfig":"83"},{"size":2800,"mtime":1616176554830,"results":"100","hashOfConfig":"83"},{"size":3598,"mtime":1616176554838,"results":"101","hashOfConfig":"83"},{"size":5446,"mtime":1616238022126,"results":"102","hashOfConfig":"83"},{"size":3375,"mtime":1616176554831,"results":"103","hashOfConfig":"83"},{"size":2137,"mtime":1616176554835,"results":"104","hashOfConfig":"83"},{"size":1121,"mtime":1616176554836,"results":"105","hashOfConfig":"83"},{"size":870,"mtime":1616176554836,"results":"106","hashOfConfig":"83"},{"size":2203,"mtime":1616176554835,"results":"107","hashOfConfig":"83"},{"size":823,"mtime":1616176554842,"results":"108","hashOfConfig":"83"},{"size":9196,"mtime":1616176554832,"results":"109","hashOfConfig":"83"},{"size":52831,"mtime":1616176554843,"results":"110","hashOfConfig":"83"},{"size":2904,"mtime":1616176554837,"results":"111","hashOfConfig":"83"},{"size":1871,"mtime":1616176554837,"results":"112","hashOfConfig":"83"},{"size":980,"mtime":1616176554841,"results":"113","hashOfConfig":"83"},{"size":848,"mtime":1616176554836,"results":"114","hashOfConfig":"83"},{"size":1097,"mtime":1616176554832,"results":"115","hashOfConfig":"83"},{"size":2169,"mtime":1616176554832,"results":"116","hashOfConfig":"83"},{"size":2512,"mtime":1616176554832,"results":"117","hashOfConfig":"83"},{"size":1756,"mtime":1616176554841,"results":"118","hashOfConfig":"83"},{"size":1175,"mtime":1616176554835,"results":"119","hashOfConfig":"83"},{"size":8619,"mtime":1616176554832,"results":"120","hashOfConfig":"83"},{"size":5159,"mtime":1616176554834,"results":"121","hashOfConfig":"83"},{"size":5752,"mtime":1616176554834,"results":"122","hashOfConfig":"83"},{"size":235,"mtime":1616176554842,"results":"123","hashOfConfig":"83"},{"size":416,"mtime":1616176554842,"results":"124","hashOfConfig":"83"},{"size":830,"mtime":1616176554842,"results":"125","hashOfConfig":"83"},{"size":958,"mtime":1616176554842,"results":"126","hashOfConfig":"83"},{"size":728,"mtime":1616176554842,"results":"127","hashOfConfig":"83"},{"size":388,"mtime":1616176554834,"results":"128","hashOfConfig":"83"},{"size":492,"mtime":1616176554834,"results":"129","hashOfConfig":"83"},{"size":487,"mtime":1616176554834,"results":"130","hashOfConfig":"83"},{"size":1836,"mtime":1616176554833,"results":"131","hashOfConfig":"83"},{"size":9277,"mtime":1616176554834,"results":"132","hashOfConfig":"83"},{"size":346,"mtime":1616176554833,"results":"133","hashOfConfig":"83"},{"size":4436,"mtime":1616176554833,"results":"134","hashOfConfig":"83"},{"size":440,"mtime":1616176554833,"results":"135","hashOfConfig":"83"},{"size":1114,"mtime":1616176554833,"results":"136","hashOfConfig":"83"},{"size":4685,"mtime":1616176554833,"results":"137","hashOfConfig":"83"},{"size":2056,"mtime":1616176554833,"results":"138","hashOfConfig":"83"},{"size":2522,"mtime":1616176554841,"results":"139","hashOfConfig":"83"},{"size":302,"mtime":1616176554842,"results":"140","hashOfConfig":"83"},{"size":2551,"mtime":1616176554841,"results":"141","hashOfConfig":"83"},{"size":301,"mtime":1616176554841,"results":"142","hashOfConfig":"83"},{"size":298,"mtime":1616176554840,"results":"143","hashOfConfig":"83"},{"size":3295,"mtime":1616176554836,"results":"144","hashOfConfig":"83"},{"size":5177,"mtime":1616176554833,"results":"145","hashOfConfig":"83"},{"size":929,"mtime":1616176554840,"results":"146","hashOfConfig":"83"},{"size":625,"mtime":1616176554835,"results":"147","hashOfConfig":"83"},{"size":1249,"mtime":1616176554839,"results":"148","hashOfConfig":"83"},{"size":2008,"mtime":1616176554836,"results":"149","hashOfConfig":"83"},{"size":549,"mtime":1616176554841,"results":"150","hashOfConfig":"83"},{"size":3739,"mtime":1616176554837,"results":"151","hashOfConfig":"83"},{"size":807,"mtime":1616176554842,"results":"152","hashOfConfig":"83"},{"size":3202,"mtime":1616176554836,"results":"153","hashOfConfig":"83"},{"size":1291,"mtime":1616176554838,"results":"154","hashOfConfig":"83"},{"size":4809,"mtime":1616176554838,"results":"155","hashOfConfig":"83"},{"size":681,"mtime":1616176554838,"results":"156","hashOfConfig":"83"},{"size":891,"mtime":1616176554842,"results":"157","hashOfConfig":"83"},{"size":811,"mtime":1616176554841,"results":"158","hashOfConfig":"83"},{"size":841,"mtime":1616176554840,"results":"159","hashOfConfig":"83"},{"size":337,"mtime":1616176554840,"results":"160","hashOfConfig":"83"},{"size":449,"mtime":1616176554840,"results":"161","hashOfConfig":"83"},{"size":374,"mtime":1616176554839,"results":"162","hashOfConfig":"83"},{"size":342,"mtime":1616176554842,"results":"163","hashOfConfig":"83"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"q4ez21",{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"166"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"174","usedDeprecatedRules":"166"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"177","usedDeprecatedRules":"166"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"180","usedDeprecatedRules":"166"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183","usedDeprecatedRules":"166"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"166"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"166"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"166"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"166"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"202","messages":"203","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"166"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"209","usedDeprecatedRules":"166"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"166"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"221","messages":"222","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"231","usedDeprecatedRules":"166"},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"166"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"166"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"166"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"166"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"260","usedDeprecatedRules":"166"},{"filePath":"261","messages":"262","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"263","usedDeprecatedRules":"166"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"266","messages":"267","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"270","messages":"271","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"272","messages":"273","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"276","usedDeprecatedRules":"166"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"283","usedDeprecatedRules":"166"},{"filePath":"284","messages":"285","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"286","usedDeprecatedRules":"166"},{"filePath":"287","messages":"288","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"289","messages":"290","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"291","usedDeprecatedRules":"166"},{"filePath":"292","messages":"293","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"294","messages":"295","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"296","messages":"297","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"298","usedDeprecatedRules":"166"},{"filePath":"299","messages":"300","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"301","messages":"302","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"303","usedDeprecatedRules":"166"},{"filePath":"304","messages":"305","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"306","messages":"307","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"308","usedDeprecatedRules":"166"},{"filePath":"309","messages":"310","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"311","messages":"312","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"313"},{"filePath":"314","messages":"315","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"316","messages":"317","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"318","usedDeprecatedRules":"166"},{"filePath":"319","messages":"320","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"321","messages":"322","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"323","messages":"324","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"325","messages":"326","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"327","messages":"328","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"329","messages":"330","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"331","usedDeprecatedRules":"166"},{"filePath":"332","messages":"333","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"334","messages":"335","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"336","usedDeprecatedRules":"166"},{"filePath":"337","messages":"338","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"339","messages":"340","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"341","usedDeprecatedRules":"166"},{"filePath":"342","messages":"343","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"344","usedDeprecatedRules":"166"},{"filePath":"345","messages":"346","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"347","messages":"348","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"349","messages":"350","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"351","messages":"352","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"353","messages":"354","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},{"filePath":"355","messages":"356","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"357","usedDeprecatedRules":"166"},{"filePath":"358","messages":"359","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"166"},"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/index.js",[],["360","361"],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/reportWebVitals.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/App.js",["362"],"import { Container } from \"@material-ui/core\";\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Badge from \"@material-ui/core/Badge\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport NotificationsIcon from \"@material-ui/icons/Notifications\";\nimport React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport About from \"./components/about\";\nimport Dashboard2 from \"./components/dashboard/Dashboard\";\nimport Hardware from \"./components/hardware\";\nimport ActorForm from \"./components/hardware/ActorForm\";\nimport KettleForm from \"./components/hardware/KettleForm\";\nimport SensorForm from \"./components/hardware/SensorForm\";\nimport Plugins from \"./components/plugins\";\nimport MashProfile from \"./components/mashprofile\";\nimport Settings from \"./components/settings\";\nimport Menu from \"./components/util/Menu\";\nimport PrivateRoute from \"./components/util/PrivateRoute\";\nimport logo from \"./images/cbpi_no_border.png\";\nimport StepForm from \"./components/mashprofile/StepForm\";\nimport Recipes from \"./components/recipes\";\nimport RecipeEditor from \"./components/recipes/RecipeEditor\";\nimport { Charting } from \"./components/charting\";\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n  },\n  toolbar: {\n    paddingRight: 24, // keep right padding when drawer closed\n  },\n  toolbarIcon: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    padding: \"0 8px\",\n    ...theme.mixins.toolbar,\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n  },\n  appBarShift: {\n    marginLeft: drawerWidth,\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create([\"width\", \"margin\"], {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  menuButton: {\n    marginRight: 36,\n  },\n  menuButtonHidden: {\n    display: \"none\",\n  },\n  title: {\n    flexGrow: 1,\n  },\n  drawerPaper: {\n    position: \"relative\",\n    whiteSpace: \"nowrap\",\n    width: drawerWidth,\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.enteringScreen,\n    }),\n  },\n  drawerPaperClose: {\n    overflowX: \"hidden\",\n    transition: theme.transitions.create(\"width\", {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen,\n    }),\n    width: theme.spacing(7),\n    [theme.breakpoints.up(\"sm\")]: {\n      width: theme.spacing(9),\n    },\n  },\n  appBarSpacer: theme.mixins.toolbar,\n  content: {\n    flexGrow: 1,\n\n    height: \"100vh\",\n    overflow: \"auto\",\n  },\n  container: {\n    paddingTop: theme.spacing(1),\n    paddingBottom: theme.spacing(4),\n  },\n  paper: {\n    padding: theme.spacing(2),\n    display: \"flex\",\n    overflow: \"auto\",\n    flexDirection: \"column\",\n  },\n  fixedHeight: {\n    height: 240,\n  },\n  dashoard: {\n    data: theme.mixins.toolbar,\n  },\n  snack: {\n    position: \"absolute\",\n    bottom: 10,\n    right: 30,\n    \"& > * + *\": {\n      marginTop: theme.spacing(1),\n    },\n  },\n}));\n\nconst CraftBeerPiApp = () => {\n  const classes = useStyles();\n  const [open, setOpen] = React.useState(false);\n  const handleDrawerOpen = () => {\n    setOpen(true);\n  };\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <Router>\n        <Switch>\n          <PrivateRoute path=\"/\">\n            <AppBar position=\"absolute\" className={classes.appBar}>\n              <Toolbar className={classes.toolbar}>\n                <IconButton edge=\"start\" color=\"inherit\" aria-label=\"open drawer\" onClick={handleDrawerOpen} className={classes.menuButton}>\n                  <MenuIcon />\n                </IconButton>\n                <div className={classes.title} style={{ display: \"flex\", alignItems: \"center\", flexDirection: \"row\" }}>\n                  <img width={30} src={logo} style={{ marginRight: 10 }} />\n                  <Typography component=\"h1\" variant=\"h4\" color=\"inherit\" noWrap>\n                    CraftBeerPi 4.0\n                  </Typography>\n                </div>\n                <IconButton color=\"inherit\">\n                  <Badge badgeContent={4} color=\"secondary\">\n                    <NotificationsIcon />\n                  </Badge>\n                </IconButton>\n              </Toolbar>\n            </AppBar>\n            <Drawer open={open} onClose={() => setOpen(false)}>\n              <Menu onClose={() => setOpen(false)} />\n            </Drawer>\n\n            <main className={classes.content}>\n              <div className={classes.appBarSpacer} />\n\n              <Container maxWidth={false} className={classes.container}>\n                <Route exact path=\"/\">\n                  <Dashboard2 />\n                </Route>\n\n                <Container maxWidth=\"lg\">\n                  <Route path=\"/plugins\">\n                    <Plugins />\n                  </Route>\n                  <Route path=\"/about\">\n                    <About />\n                  </Route>\n                  <Route path=\"/hardware\">\n                    <Hardware />\n                  </Route>\n                  <Route exact path=\"/kettle/:id\">\n                    <KettleForm />\n                  </Route>\n\n                  <Route exact path=\"/kettle\">\n                    <KettleForm />\n                  </Route>\n                  <Route exact path=\"/actor/:id\">\n                    <ActorForm />\n                  </Route>\n                  <Route exact path=\"/actor\">\n                    <ActorForm />\n                  </Route>\n                  <Route exact path=\"/sensor/:id\">\n                    <SensorForm />\n                  </Route>\n                  <Route exact path=\"/sensor\">\n                    <SensorForm />\n                  </Route>\n                  <Route exact path=\"/settings\">\n                    <Settings />\n                  </Route>\n                  <Route exact path=\"/mashprofile\">\n                    <MashProfile/>\n                  </Route>\n                  <Route exact path=\"/recipes\">\n                    <Recipes/>\n                  </Route>\n                  \n                  <Route exact path=\"/recipe/:id\">\n                    <RecipeEditor/>\n                  </Route>\n                  <Route exact path=\"/step\">\n                    <StepForm/>\n                  </Route>\n                  <Route exact path=\"/step/:id\">\n                    <StepForm/>\n                  </Route>\n                  <Route exact path=\"/charting\">\n                    <Charting/>\n                  </Route>                  \n                </Container>\n              </Container>\n            </main>\n          </PrivateRoute>\n        </Switch>\n        \n      </Router>\n    </div>\n  );\n};\n\nexport default CraftBeerPiApp;\n\n/*\n\n*/\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/alert/AlertProvider.js",["363","364"],"import { makeStyles } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport { createContext, useCallback, useContext, useMemo, useState } from \"react\";\n\nimport Button from \"@material-ui/core/Button\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport React from \"react\";\n\nimport { notificationapi } from \"../data/notificationapi\";\n\nexport const ActionDialog = ({ item }) => {\n  const alert = useAlert();\n\n  const call_action = (dialog_id, action) => {\n    alert.remove(dialog_id);\n    notificationapi.action(dialog_id, action, (data) => {\n      console.log(data);\n    });\n  };\n\n  return (\n    <Dialog open={true} aria-labelledby=\"alert-dialog-title\" aria-describedby=\"alert-dialog-description\">\n      <DialogTitle id=\"alert-dialog-title\">{item.title}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">{item.message}</DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        {item.action.map((a) => {\n          return (\n            <Button onClick={() => call_action(item.id, a.id)} color=\"primary\">\n              {a.label}\n            </Button>\n          );\n        })}\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    position: \"absolute\",\n    bottom: 10,\n    right: 30,\n    \"& > * + *\": {\n      marginTop: theme.spacing(1),\n    },\n  },\n}));\n\nexport const AlertContext = createContext({});\n\nexport const AlertProvider = ({ children }) => {\n  const classes = useStyles();\n  const [alerts, setAlerts] = useState([]);\n\n  const remove = useCallback((id) => {\n    setAlerts((value) => {\n      return value.filter((a) => a.id !== id);\n    });\n  }, []);\n\n  const show = useCallback((id, title = \"\", message = \"\", type = \"info\", action = null, timeout = 5000) => {\n    const alert = {\n      id,\n      title,\n      message,\n      type,\n      action,\n    };\n\n    if (action?.length <= 0) {\n      const timerId = setTimeout(() => {\n        remove(id);\n      }, timeout);\n    }\n\n    setAlerts((state) => state.concat(alert));\n    return alert;\n  }, []);\n\n  const value = {\n    alerts,\n    show,\n    remove,\n  };\n\n  return (\n    <AlertContext.Provider value={value}>\n      {children}\n\n      <div className={classes.root}>\n        {alerts.map((a) => {\n          if (a?.action?.length > 0) {\n            return <ActionDialog key={a.id} item={a} />;\n          } else {\n            return <Alert severity={a.type || \"info\"} key={a.id}>{a.title} - {a.message}</Alert>;\n          }\n        })}\n      </div>\n    </AlertContext.Provider>\n  );\n};\n\nexport const useAlert = (Context) => {\n  const alertContext = useContext(AlertContext);\n  const alert = useMemo(() => {\n    return alertContext;\n  }, [alertContext]);\n  return alert;\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/index.js",["365","366","367","368","369","370","371","372"],"import { createContext, useCallback, useContext, useEffect, useMemo, useState } from \"react\";\nimport axios from \"axios\";\nimport CBPiWebSocket from \"./websocket\";\nimport { actorapi } from \"./actorapi\";\nimport { useEventCallback } from \"@material-ui/core\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { kettleapi } from \"./kettleapi\";\nimport { sensorapi } from \"./sensorapi\";\nlet MQTTPattern = require(\"mqtt-pattern\");\n\nconst messageTypes = {\n  \"sensor/+id/data\": \"SENSOR_UPDATE\",\n  \"config/+id/update\": \"CONFIG_UPDATE\",\n  \"step/update\": \"STEP_UPDATE\",\n};\n\nexport const CBPiContext = createContext({});\n\nexport const CBPiProvider = ({ children }) => {\n  const [sensors, setSensors] = useState([]);\n  const [sensorData, setSensorData] = useState({});\n  const [config, setConfig] = useState({});\n  const [actors, setActors] = useState([]);\n  const [logic, setLogic] = useState([]);\n  const [actorTypes, setActorTypes] = useState([]);\n  const [sensorTypes, setSensorTypes] = useState([]);\n  const [kettle, setKettle] = useState([]);\n  const [mashProfile, setMashProfile] = useState([]);\n  const [mashBasic, setMashBasic] = useState([]);\n  const [stepTypes, setStepTypes] = useState([]);\n  const [auth, setAuth] = useState(null);\n  const [plugins, setPlugins] = useState([]);\n  const [temp, setTemp] = useState(\"\");\n  const [version, setVersion] = useState(\"---\");\n  const a = useAlert();\n  const [notification, setNotifiaction] = useState(\"\");\n\n  const onMessage = useCallback((data) => {\n    //console.log(\"WS\", data);\n    switch (data.topic) {\n      case \"kettleupdate\":\n        setKettle(() => data.data);\n        break;\n      case \"actorupdate\":\n        setActors(() => data.data);\n        break;\n      case \"sensorstate\":\n        setSensorData((current) => ({ ...current, [data.id]: data.value }));\n        break;\n      case \"step_update\":\n        setMashProfile(() => data.data);\n        break;\n      case \"mash_profile_update\":\n        setMashProfile(() => data.data.steps);\n        setMashBasic(data.data.basic);\n        break;\n      case \"sensorupdate\":\n        setSensors(() => data.data);\n        break;\n      case \"notifiaction\":\n        \n        a.show(data.id, data.title, data.message, data.type, data.action);\n        break;\n      default:\n        break;\n    }\n  });\n\n  useEffect(() => {\n    setNotifiaction(null);\n  }, [notification]);\n\n  useEffect(() => {\n    const ws = new CBPiWebSocket(onMessage, alert);\n    ws.connect();\n\n    axios.get(\"/system/\").then((res) => {\n      const data = res.data;\n      setKettle(data.kettle.data);\n      setSensors(data.sensor.data);\n      setActors(data.actor.data);\n      setLogic(Object.values(data.kettle.types));\n      setActorTypes(Object.values(data.actor.types));\n      setSensorTypes(Object.values(data.sensor.types));\n      setMashProfile(data.step.steps);\n      setMashBasic(data.step.basic);\n      setConfig(data.config);\n      setVersion(data.version);\n      setStepTypes(Object.values(data.step.types));\n      setAuth(true);\n    });\n  }, []);\n\n  // Step API\n  const get_step_by_id = (id) => mashProfile.find((item) => item.id === id);\n  const add_kettle = (data, onSuccess = () => {}, onError = () => {}) => kettleapi.add(data, onSuccess, onError);\n  const update_kettle = (id, data, onSuccess = () => {}, onError = () => {}) => kettleapi.save(id, data, onSuccess, onError);\n  const delete_kettle = (id, onSuccess = () => {}, onError = () => {}) => kettleapi.remove(id, onSuccess, onError);\n  const target_temp_kettle = useEventCallback((id, temp) => kettleapi.target_temp(id, temp), []);\n  const toggle_logic = useEventCallback((id) => kettleapi.toggle(id), []);\n\n  const add_actor = (data, onSuccess = () => {}, onError = () => {}) => actorapi.add(data, onSuccess, onError);\n  const update_actor = (id, data, onSuccess = () => {}, onError = () => {}) => actorapi.save(id, data, onSuccess, onError);\n  const delete_actor = (id, onSuccess = () => {}, onError = () => {}) => actorapi.remove(id, onSuccess, onError);\n  const get_actor_by_id = (id) => actors.find((item) => item.id === id);\n\n  const toggle_actor = useEventCallback((id) => {\n    const actor = get_actor_by_id(id);\n    if (!actor) return;\n    if (actor.state === false) {\n      actorapi.on(id, (data) => setActors((current_actors) => current_actors.map((item, index) => (item.id === id ? { ...item, state: true } : item))));\n    } else {\n      actorapi.off(id, (data) => setActors((current_actors) => current_actors.map((item, index) => (item.id === id ? { ...item, state: false } : item))));\n    }\n  }, []);\n\n  const add_sensor = (data, onSuccess = () => {}, onError = () => {}) => sensorapi.add(data, onSuccess, onError);\n  const update_sensor = (id, data, onSuccess = () => {}, onError = () => {}) => sensorapi.save(id, data, onSuccess, onError);\n  const delete_sensor = (id, onSuccess = () => {}, onError = () => {}) => sensorapi.remove(id, onSuccess, onError);\n\n  const get_sensor_by_id = (id) => sensors.find((item) => item.id === id);\n\n  const value = {\n    state: { sensors, version, actors, logic, kettle, auth, plugins, temp, sensorData, actorTypes, sensorTypes, config, mashProfile, mashBasic, stepTypes },\n    actions: {\n      delete_kettle,\n      add_kettle,\n      target_temp_kettle,\n      toggle_logic,\n      update_kettle,\n      add_actor,\n      update_actor,\n      delete_actor,\n      toggle_actor,\n      get_actor_by_id,\n      add_sensor,\n      update_sensor,\n      delete_sensor,\n      get_sensor_by_id,\n      get_step_by_id,\n    },\n  };\n\n  return <CBPiContext.Provider value={value}>{children}</CBPiContext.Provider>;\n};\n\nexport const useCBPi = (Context) => {\n  const { state, actions } = useContext(CBPiContext);\n  const value = useMemo(() => {\n    return {\n      state,\n      version: state.version,\n      kettle: state.kettle,\n      actor: state.actors,\n      actorTypes: state.actorTypes,\n      sensor: state.sensors,\n      sensorTypes: state.sensorTypes,\n      config: state.config,\n      actions,\n    };\n  }, [state]);\n  return value;\n};\n\nexport const useSensor = (id = null) => {\n  const { sensor, state } = useCBPi();\n  const value = useMemo(() => {\n    return id === null ? sensor : sensor.find((item) => item.id === id);\n  }, [sensor, id]);\n  return value;\n};\n\nexport const useKettle = (id) => {\n  const { kettle } = useCBPi();\n  const value = useMemo(() => {\n    return kettle.find((item) => item.id === id);\n  }, [kettle, id,]);\n  return value;\n};\n\nexport const useActor = (id = null) => {\n  const { actor } = useCBPi();\n  const value = useMemo(() => {\n    return id === null ? actor : actor.find((item) => item.id === id);\n  }, [actor, id]);\n  return value;\n};\nexport const useActorType = (name = null) => {\n  const { actorTypes } = useCBPi();\n  const value = useMemo(() => {\n    return name === null ? actorTypes : actorTypes.find((item) => item.name === name);\n  }, [actorTypes, name]);\n  return value;\n};\n\nexport const useSensorType = (name = null) => {\n  const { sensorTypes } = useCBPi();\n  const value = useMemo(() => {\n    return name === null ? sensorTypes : sensorTypes.find((item) => item.name === name);\n  }, [sensorTypes, name]);\n  return value;\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/ActorForm.js",["373"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport ActorTypeSelect from \"../util/ActorTypeSelect\";\nimport PropsEdit from \"../util/PropsEdit\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst ActorForm = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const { actor, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({})\n\n  useEffect(() => {\n    if (id) {\n      const item = actor.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setType(item.type);\n        setProps(item.props)\n        if (item.type) {\n          setPropsConfig(state.actorTypes.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const save = () => {\n    const data = {\n      name,\n      type,\n      props,\n      config: {},\n    };\n\n    if (id) {\n      actions.update_actor(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_actor(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  const onChangeProps = (name, value) => {\n    console.log(name, value);\n    setProps({...props, [name]: value})\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.actorTypes.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Actor Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Actor\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField variant="standard"required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorTypeSelect label=\"Type\" value={type} onChange={onChangeType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default ActorForm;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/KettleForm.js",["374"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport ActorSelect from \"../util/ActorSelect\";\nimport LogicSelect from \"../util/LogicSelect\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport SensorSelect from \"../util/SensorSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst KettleForm = () => {\n  \n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const [heater, setHeater] = useState(\"\");\n  const [agitator, setAgitator] = useState(\"\");\n  const [sensor, setSensor] = useState(\"\");\n  const { kettle, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({});\n\n  const save = () => {\n    const data = {\n      name,\n      sensor,\n      heater,\n      agitator,\n      type,\n      props,\n    };\n\n    if (id) {\n      actions.update_kettle(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_kettle(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  useEffect(() => {\n    if (id) {\n      const item = kettle.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setHeater(item.heater);\n        setAgitator(item.agitator);\n        setType(item.type);\n        setSensor(item.sensor);\n        setProps(item.props);\n        if (item.type) {\n          setPropsConfig(state.logic.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.logic.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Kettle Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Kettle\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField variant="standard"required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <LogicSelect value={type} onChange={onChangeType} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorSelect label=\"Heater\" value={heater} onChange={(e) => setHeater(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <ActorSelect label=\"Agitator\" value={agitator} onChange={(e) => setAgitator(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <SensorSelect value={sensor} onChange={(e) => setSensor(e.target.value)} />\n          </Grid>\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default KettleForm;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/StepForm.js",["375","376","377"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useContext, useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { CBPiContext, useCBPi } from \"../data\";\nimport { stepapi } from \"../data/stepapi\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport StepTypeSelct from \"../util/StepTypeSelect\";\n\nconst props = [\n  {\n    label: \"Parameter1\",\n    type: \"number\",\n    configurable: true,\n    description: \"\",\n    default_value: null,\n  },\n  {\n    label: \"Parameter2\",\n    type: \"text\",\n    configurable: true,\n    default_value: \"HALLO\",\n    description: \"\",\n  },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst StepForm = () => {\n  const history = useHistory();\n  const alert = useAlert();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const [props, setProps] = useState({})\n  const [propsConfig, setPropsConfig] = useState(null);\n  const { id } = useParams();\n  const { state } = useCBPi();\n\n  const { actions } = useContext(CBPiContext);\n\n  const save = () => {\n    const data = {\n      name,\n      type,\n      props,\n    };\n\n    if (id) {\n      stepapi.save(id, data, (data) => {\n        \n        history.push(\"/mashprofile\");\n      });\n    } else {\n      stepapi.add(data, (data) => {\n        \n        history.push(\"/mashprofile\");\n      });\n    }\n  };\n  const onSelectType = (e) => {\n    const name = e.target.value;\n    setType(name);\n    const type2 = state.stepTypes.find((item) => item.name === name);\n    setPropsConfig(type2?.properties);\n  };\n  const onChangeProps = (name, value) => setProps({...props, [name]: value})\n\n\n  useEffect(() => {\n    if (id) {\n      const k = actions.get_step_by_id(id);\n\n      if (k) {\n        setName(k.name);\n        setType(k.type);\n        setProps(k.props)\n        if (k.type) {\n          setPropsConfig(state.stepTypes.find((item) => item.name === k.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Step Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/mashprofile\");\n          }}\n        >\n          Mash Profile\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField variant="standard"required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <StepTypeSelct value={type} onChange={onSelectType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/mashprofile\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default StepForm;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/SensorForm.js",["378"],"import { Breadcrumbs, Divider, Link, Paper, Typography } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport Grid from \"@material-ui/core/Grid\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useCBPi } from \"../data\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport SensorTypeSelect from \"../util/SensorTypeSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  appBar: {\n    position: \"relative\",\n  },\n  layout: {\n    width: \"auto\",\n    marginLeft: theme.spacing(2),\n    marginRight: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(2) * 2)]: {\n      width: 600,\n      marginLeft: \"auto\",\n      marginRight: \"auto\",\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    padding: theme.spacing(2),\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(6),\n      marginBottom: theme.spacing(6),\n      padding: theme.spacing(3),\n    },\n  },\n  stepper: {\n    padding: theme.spacing(3, 0, 5),\n  },\n  buttons: {\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n  button: {\n    marginTop: theme.spacing(3),\n    marginLeft: theme.spacing(1),\n  },\n}));\n\nconst SensorForm = () => {\n  const history = useHistory();\n  const classes = useStyles();\n  const [name, setName] = useState(\"\");\n  const [type, setType] = useState(\"\");\n  const { id } = useParams();\n  const { sensor, state, actions } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n  const [props, setProps] = useState({});\n\n  useEffect(() => {\n    if (id) {\n      const item = sensor.find((item) => item.id === id);\n      if (item) {\n        setName(item.name);\n        setType(item.type);\n        setProps(item.props);\n        if (item.type) {\n          setPropsConfig(state.sensorTypes.find((i) => i.name === item.type)?.properties);\n        }\n      }\n    }\n  }, []);\n\n  const save = () => {\n    const data = { name, type, props };\n\n    if (id) {\n      actions.update_sensor(id, data, () => history.push(\"/hardware\"));\n    } else {\n      actions.add_sensor(data, () => history.push(\"/hardware\"));\n    }\n  };\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  const onChangeType = (e) =>  {\n    const value = e.target.value\n    setType(value)\n    if (value) {\n      setPropsConfig(state.sensorTypes.find((i) => i.name === value)?.properties);\n    }\n  }\n\n  return (\n    <>\n      <Typography variant=\"h6\" gutterBottom>\n        Sensor Config\n      </Typography>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/hardware\");\n          }}\n        >\n          Sensor\n        </Link>\n        <Typography color=\"textPrimary\">{name}</Typography>\n      </Breadcrumbs>\n\n      <Divider />\n      <Paper className={classes.paper}>\n        <Grid container spacing={3}>\n          <Grid item xs={12} md={6}>\n            <TextField variant="standard"required id=\"name\" label=\"Name\" fullWidth value={name} onChange={(e) => setName(e.target.value)} />\n          </Grid>\n          <Grid item xs={12} md={6}>\n            <SensorTypeSelect label=\"Type\" value={type} onChange={onChangeType} />\n          </Grid>\n\n          <PropsEdit config={propsConfig} data={props} onChange={onChangeProps} />\n        </Grid>\n        <div className={classes.buttons}>\n          <Button\n            variant=\"contained\"\n            color=\"secondary\"\n            onClick={() => {\n              history.push(\"/hardware\");\n            }}\n            className={classes.button}\n          >\n            Cancel\n          </Button>\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={() => {\n              save();\n            }}\n            className={classes.button}\n          >\n            Save\n          </Button>\n        </div>\n      </Paper>\n    </>\n  );\n};\n\nexport default SensorForm;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/RecipeEditor.js",["379","380"],"import { Breadcrumbs, Divider, Grid, IconButton, Link, Typography } from \"@material-ui/core\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport { useEffect, useState } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { recipeapi } from \"../data/recipeapi\";\nimport Header from \"../util/Header\";\nimport { BasicData } from \"./BasicData\";\nimport { MashStepList } from \"./MashStepList\";\nimport FileCopyIcon from '@material-ui/icons/FileCopy';\nimport DeleteDialog from \"../util/DeleteDialog\";\nimport { CloneRecipeDialog } from \"./CloneRecipeDialog\";\nimport { CBPiPaddleIcon } from \"../util/icons/CBPiSensorIcon\";\n\nconst RecipeEditor = () => {\n  const { id } = useParams();\n  const [open, setOpen] = useState(false)\n  const history = useHistory();\n  const [steps, setSteps] = useState([]);\n  const [basicData, setBasicData] = useState({ name: \"\", author: \"\", desc: \"\" });\n  \n  useEffect(() => {\n    if (id) {\n      const success = (data) => {\n        setBasicData(data.basic);\n        setSteps(data.steps);\n      };\n\n      recipeapi.load(id, success);\n    }\n  }, [id]);\n\n  const save = () => recipeapi.save(id, { basic: basicData, steps });\n  const addStep = () => setSteps([...steps, { name: \"\", props: {}, type: \"\" }]);\n  const back = () => history.push(\"/recipes\");\n  const brew = () => {\n    recipeapi.brew(id)\n    history.push(\"/mashprofile\")\n  }\n\n  const remove = () => {\n    recipeapi.remove(id);\n    history.goBack();\n  };\n\n  const clone = () => {\n    setOpen(true)\n  };\n\n  return (\n    <>\n      <Header title=\"Basic Data\">\n        <IconButton variant=\"contained\" onClick={back}>\n          <ArrowBackIcon />\n        </IconButton>\n        <IconButton variant=\"contained\" onClick={clone}>\n          <FileCopyIcon />\n        </IconButton>\n        <CloneRecipeDialog id={id} open={open} setOpen={setOpen}/>\n\n        <IconButton variant=\"contained\" onClick={brew}>\n          <CBPiPaddleIcon />\n        </IconButton>\n        <IconButton variant=\"contained\" onClick={save}>\n          <SaveIcon />\n        </IconButton>\n        <DeleteDialog\n            title=\"Delete Recipe\"\n            message=\"Do you want to delete the Recipe\"\n            callback={remove}\n          />\n      </Header>\n\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/mashprofile\");\n          }}\n        >\n          Active Recipe\n        </Link>\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/recipes\");\n          }}\n        >\n          Recipe Book\n        </Link>\n        <Typography color=\"textPrimary\">{basicData.name}</Typography>\n      </Breadcrumbs>\n          <Divider/>\n\n      <BasicData data={basicData} setData={setBasicData} />\n      <Header title=\"Brew Steps\">\n        <IconButton variant=\"contained\" onClick={addStep}>\n          <AddIcon />\n        </IconButton>\n      </Header>\n      <Grid container spacing={3}>\n        <Grid item sm={12}>\n          <MashStepList items={steps} setItems={setSteps} />\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default RecipeEditor;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/Dashboard.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/PrivateRoute.js",["381","382"],"import { Redirect } from \"react-router-dom\";\nimport React, { useContext } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport Box from \"@material-ui/core/Box\";\nimport logo from \"../../images/cbpi_pattern.png\";\nimport { ReactComponent as CBPiSVG } from \"../../images/CBPi_logo.svg\";\n\n\nimport CircularProgress from \"@material-ui/core/CircularProgress/CircularProgress\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { CBPiContext } from \"../data\";\n\nconst PrivateRoute = ({ children, ...rest }) => {\n  const { state } = useContext(CBPiContext);\n\n  if (state.auth === null) {\n    //if (true) {\n    return (\n      <Box className=\"loadingbg\" width=\"100%\" height=\"100vh\" display=\"flex\" justifyContent=\"center\" flexDirection=\"column\">\n        <Box display=\"flex\" justifyContent=\"center\">\n          <CBPiSVG/>\n        </Box>\n        <Typography variant=\"body2\" color=\"textSecondary\" align=\"center\">\n          Please wait\n        </Typography>\n      </Box>\n    );\n  }\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        state.auth ? (\n          children\n        ) : (\n          <Redirect\n            to={{\n              pathname: \"/about\",\n              state: { from: location },\n            }}\n          />\n        )\n      }\n    />\n  );\n};\n\nexport default PrivateRoute;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Menu.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/notificationapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/index.js",["383"],"import { Button, Divider, IconButton, makeStyles, Paper } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport Header from \"../util/Header\";\nimport ActorTable from \"./ActorTable\";\nimport KettleTable from \"./KettleTable\";\nimport SensorTable from \"./SensorTable\";\n\nconst useStyles = makeStyles((theme) => ({\n  table: {},\n  paper: {\n    padding: theme.spacing(2),\n    color: theme.palette.text.secondary,\n  },\n}));\n\nexport default function Hardware() {\n  const classes = useStyles();\n  const history = useHistory();\n\n  return (\n    <>\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{ marginTop: 10 }}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Hardware\n          </Typography>\n        </Grid>\n        <Grid item></Grid>\n      </Grid>\n\n      <Divider style={{ marginBottom: 10, marginTop: 10 }} />\n      <Grid container spacing={3}>\n        <Grid item sm={12}>\n          <Paper className={classes.paper}>\n            <Header title=\"Kettle\">\n              <IconButton\n                variant=\"contained\"\n                onClick={() => {\n                  history.push(\"/kettle\");\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Header>\n            <KettleTable />\n          </Paper>\n        </Grid>\n        <Grid item sm={12}>\n          <Paper className={classes.paper}>\n            <Header title=\"Sensor\">\n              \n\n              <IconButton\n                variant=\"contained\"\n                onClick={() => {\n                  history.push(\"/sensor\");\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Header>\n            <SensorTable />\n          </Paper>\n        </Grid>\n        <Grid item sm={12}>\n          <Paper className={classes.paper}>\n            <Header title=\"Actor\">\n            <IconButton\n                variant=\"contained\"\n                onClick={() => {\n                  history.push(\"/actor\");\n                }}\n              >\n                <AddIcon />\n              </IconButton>\n            </Header>\n            <ActorTable />\n          </Paper>\n        </Grid>\n      </Grid>\n    </>\n  );\n}\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/index.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/index.js",["384","385"],"import { Breadcrumbs, Divider, makeStyles, Paper,InputBase, IconButton, Link, List, ListItem, ListItemSecondaryAction, ListItemText, ListItemIcon } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport React, { useEffect, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { recipeapi } from \"../data/recipeapi\";\nimport { NewRecipeDialog } from \"./NewRecipeDialog\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport AssignmentIcon from '@material-ui/icons/Assignment';\nimport { CBPiBeerIcon } from \"../util/icons/CBPiSensorIcon\";\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n}));\n\n\n\nconst Recipes = () => {\n  const [totalList, setTotalList] = useState([]);\n  const [list, setList] = useState([]);\n  const history = useHistory();\n  const [open, setOpen] = useState(false)\n  const [filter, setFilter] = useState(\"\");\n  const classes = useStyles();\n\n  useEffect(() => {\n    recipeapi.get((data) => {\n      setTotalList(data)\n      setList(data);\n    });\n  }, []);\n\n  useEffect(() => {\n    console.log(filter)\n    if(filter) {\n      setList(totalList.filter(item=> item?.name.includes(filter) ))\n    }\n    else {\n      setList(totalList)\n    }\n  }, [filter]);\n\n  \n\n  const openRecipe = (file) => {\n    history.push(\"/recipe/\" + file);\n  };\n\n  const createRecipe = () => {\n    setOpen(true)\n\n  }\n\n \n\n\n  return (\n    <>\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{ marginTop: 10 }}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Recipes\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Paper component=\"form\" className={classes.root}>\n            <InputBase\n              className={classes.input}\n              value={filter}\n              onChange={(e) => {\n                setFilter(e.target.value);\n              }}\n              placeholder=\"Filter\"\n              inputProps={{ \"aria-label\": \"filter settings\" }}\n            />\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n              <SearchIcon />\n            </IconButton>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <IconButton variant=\"contained\" onClick={createRecipe}>\n            <AddIcon />\n          </IconButton>\n          <NewRecipeDialog open={open} setOpen={setOpen}/>\n        </Grid>\n      </Grid>\n      <Breadcrumbs aria-label=\"breadcrumb\">\n        <Link\n          color=\"inherit\"\n          onClick={() => {\n            history.push(\"/mashprofile\");\n          }}\n        >\n          Active Recipe\n        </Link>\n        <Typography color=\"textPrimary\">Recipes</Typography>\n      </Breadcrumbs>\n      <Divider style={{ marginBottom: 10, marginTop: 10 }} />\n      <List>\n        {list.map((item) => (\n          <ListItem button onClick={() => openRecipe(item.file)}>\n            <ListItemIcon>\n              <CBPiBeerIcon/>\n            </ListItemIcon>\n            <ListItemText primary={item.name || \"No Name\"} secondary={item.desc} />\n            <ListItemSecondaryAction>x</ListItemSecondaryAction>\n          </ListItem>\n        ))}\n      </List>\n    </>\n  );\n};\n\nexport default Recipes;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/about/index.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/plugins/index.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/settings/index.js",["386","387","388","389","390"],"import { Button, Divider, IconButton, InputBase, makeStyles, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, TextField } from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport MenuItem from \"@material-ui/core/MenuItem\";\nimport Select from \"@material-ui/core/Select\";\nimport Typography from \"@material-ui/core/Typography\";\nimport AddIcon from \"@material-ui/icons/Add\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport React, { useEffect, useState } from \"react\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { useCBPi } from \"../data\";\nimport { configapi } from \"../data/configapi\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport ActorSelect from \"../util/ActorSelect\";\nimport KettleSelect from \"../util/KettleSelect\";\nimport SensorSelect from \"../util/SensorSelect\";\nimport StepTypeSelect from \"../util/StepTypeSelect\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n  },\n  paper: {\n    padding: theme.spacing(2),\n    textAlign: \"center\",\n    color: theme.palette.text.secondary,\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n}));\n\nconst SelectBox = ({ options, value, onChange }) => {\n  return (\n    <>\n      <Select labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} onChange={onChange}>\n        {options.map((item) => (\n          <MenuItem key={item.value} value={item.value}>\n            {item.label}\n          </MenuItem>\n        ))}\n      </Select>\n    </>\n  );\n};\n\nconst ConfigInput = ({ item, onChange, value, options }) => {\n\n  switch (item.type) {\n    case \"select\":\n      return <SelectBox options={options} value={value} onChange={onChange} />\n    case \"kettle\":\n      return <KettleSelect value={value} onChange={onChange} label=\"\" />;\n    case \"sensor\":\n      return <SensorSelect value={value} onChange={onChange} label=\"\" />;\n    case \"step\":\n      return <StepTypeSelect value={value} onChange={onChange} label=\"\" />;\n    case \"actor\":\n      return <ActorSelect description={item.description} value={value} onChange={onChange} />;\n    case \"number\":\n      return <TextField variant="standard"onChange={onChange} value={value} />;\n    default:\n      return <TextField variant="standard"onChange={onChange} value={value} />;\n  }\n\n\n\n  \n};\n\nconst Settings = () => {\n  const { config: state } = useCBPi();\n  const [config, setConfig] = useState({});\n\n  const [filter, setFilter] = useState(\"\");\n  const classes = useStyles();\n  const alert = useAlert();\n  useEffect(() => {\n    setConfig({ ...state });\n  }, []);\n\n  const onChange = (field, e) => {\n    setConfig({ ...config, [field]: { ...config[field], changed: true, value: e.target.value } });\n  };\n\n  const save = () => {\n    Object.keys(config).map((key) => {\n      const parameter = config[key];\n      if (parameter.changed) {\n        configapi.update(key, parameter.value);\n        setConfig((curret_config) => ({ ...curret_config, [key]: { ...curret_config[key], changed: false } }));\n      }\n    });\n    \n  };\n\n  const reset = () => {\n    setConfig({ ...state });\n    \n  };\n\n  let data = config;\n\n  if (filter) {\n    data = Object.keys(data)\n      .filter((key) => key.includes(filter))\n      .reduce((obj, key) => {\n        obj[key] = data[key];\n        return obj;\n      }, {});\n  }\n\n  return (\n    <>\n      <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\" style={{ marginTop: 10 }}>\n        <Grid item>\n          <Typography variant=\"h5\" gutterBottom>\n            Settings\n          </Typography>\n        </Grid>\n        <Grid item>\n          <Paper component=\"form\" className={classes.root}>\n            <InputBase\n              className={classes.input}\n              value={filter}\n              onChange={(e) => {\n                setFilter(e.target.value);\n              }}\n              placeholder=\"Filter\"\n              inputProps={{ \"aria-label\": \"filter settings\" }}\n            />\n            <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n              <SearchIcon />\n            </IconButton>\n          </Paper>\n        </Grid>\n        <Grid item>\n          <IconButton onClick={reset}>\n          <RotateLeftIcon />\n            </IconButton>\n            <IconButton onClick={save}>\n              <SaveIcon />\n            </IconButton>\n          \n        </Grid>\n      </Grid>\n      <Divider style={{ marginBottom: 10, marginTop: 10 }} />\n      <TableContainer component={Paper}>\n        <Table aria-label=\"simple table\">\n          <TableHead>\n            <TableRow>\n              <TableCell>Parameter</TableCell>\n              <TableCell align=\"right\">Value</TableCell>\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {Object.keys(data).map((key) => (\n              <TableRow key={key} selected={config[key].changed}>\n                <TableCell component=\"th\" scope=\"row\">\n                  {key}\n                  <div>\n                    <small>{config[key].description}</small>\n                  </div>\n                </TableCell>\n                <TableCell align=\"right\">\n                  <ConfigInput onChange={(e) => onChange(key, e)} item={config[key]} value={config[key].value} options={config[key].options} />\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </>\n  );\n};\n\nexport default Settings;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/charting/index.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/actorapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/websocket.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/sensorapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/kettleapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorTypeSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardContext.js",["391","392","393","394","395","396"],"import { IconButton } from \"@material-ui/core\";\nimport LockIcon from \"@material-ui/icons/Lock\";\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useRef, useState } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport \"../../App.css\";\nimport { useAlert } from \"../alert/AlertProvider\";\nimport { dashboardapi } from \"../data/dashboardapi\";\nimport DeleteDialog from \"../util/DeleteDialog\";\nimport DashboardLayer from \"./DashboardLayer\";\nimport DashboardWidgetList from \"./DashboardWidgetList\";\nimport { DashboardContainer } from \"./Elements\";\nimport useKeyPress from \"./GlobalKeyPress\";\nimport { widget_list } from \"./widgets/config\";\nimport { Path } from \"./widgets/Path\";\n\nexport const DashboardContext = createContext({});\n\nexport const DashboardProvider = ({ children }) => {\n  const alert = useAlert();\n  const [selected, setSelected] = useState(null);\n  const [selectedPath, setSelectedPath] = useState(null);\n  const [current, setCurrent] = useState(\"INFO\");\n  const [width, setWidth] = useState(0);\n  const [height, setHeight] = useState(0);\n  const [elements, setElements] = useState({});\n  const [elements2, setElements2] = useState([]);\n  const [draggable, setDraggable] = useState(false);\n  const [pathes, setPathes] = useState([]);\n  const [widgets, setWidgets] = useState([])\n  const widget_dict = widget_list.reduce((a, x) => ({ ...a, [x.type]: x }), {});\n\n\n  const delelteKeyPressed = useKeyPress(8);\n\n  useEffect(() => {\n    if (selected && selected.type === \"P\") {\n      const data = [...pathes];\n      const index = data.findIndex((e) => e.id === selected.id);\n      data.splice(index, 1);\n      setPathes([...data]);\n    }\n    if (selected && selected.type === \"E\") {\n        remove(selected.id)\n    }\n  }, [delelteKeyPressed]);\n\n  const load = (width, height) => {\n    dashboardapi.get(1, (data) => {\n      const errors = [];\n      let data_model = data.elements.reduce((a, x) => {\n        if (x.type in widget_dict) {\n          return { ...a, [x.id]: { ...x, instance: <DashboardContainer key={x.id} id={x.id} type={widget_dict[x.type].component} /> } };\n        } else {\n          errors.push(\"Error can't find \" + x.type + \" Widget\");\n          return { ...a };\n        }\n      }, {});\n\n      let data_model2 = data.elements.reduce((a, x) => {\n        if (x.type in widget_dict) {\n          return [ ...a, { ...x, instance: <DashboardContainer key={x.id} id={x.id} type={widget_dict[x.type].component} /> } ];\n        } else {\n          errors.push(\"Error can't find \" + x.type + \" Widget\");\n          return [ ...a ];\n        }\n      }, []);\n      \n      setElements({ ...data_model });\n      setElements2(data_model2);  \n      let dm = data.pathes.map((v) => ({ ...v, instance: <Path key={v.id} id={v.id} coordinates={v.coordinates} condition={v.condition} max_x={width} max_y={height} /> }));\n      setPathes(dm);\n    });\n\n    dashboardapi.widgets((data)=>{\n      setWidgets(data)\n    })\n  };\n\n  const remove = (id) => {\n    \n    const data = [...elements2];\n    const index = data.findIndex((e) => e.id === selected.id);\n    data.splice(index, 1);\n    setElements2(data);\n    setSelected(null);\n  };\n\n  const update_default_prop = (id, key, value) => {\n    \n    const data = [...elements2];\n    const index = data.findIndex((e) => e.id === selected.id);\n    data[index][key] = value;\n    setElements2(data);\n\n  };\n\n  const update_coordinates = (id, x, y  ) => {\n    const data = [...elements2];\n    const index = data.findIndex((e) => e.id === selected.id);\n    data[index].x = x\n    data[index].y = y\n    setElements2(data);\n  };\n\n  const update_prop = (id, key, value) => {\n    \n    const data = [...elements2];\n    const index = data.findIndex((e) => e.id === selected.id);\n    data[index].props[key] = value;\n    \n    setElements2(data);\n\n  };\n\n  const update_path_condition = (id, data) => {\n    const index = pathes.findIndex((e) => e.id === id);\n    const temp_pathes = [...pathes];\n    temp_pathes[index].condition = data;\n\n    setPathes([...temp_pathes]);\n  };\n\n  const update_path = (id, data) => {\n    const index = pathes.findIndex((e) => e.id === id);\n    const temp_pathes = [...pathes];\n    temp_pathes[index].coordinates = data;\n\n    setPathes([...temp_pathes]);\n  };\n\n  const add = (item) => {\n    const id = uuidv4();\n    var props = item.props.reduce((obj, item) => Object.assign(obj, { [item.name]: item.default }), {});\n    const model = {\n      id,\n      type: item.type,\n      props: props,\n      name: item.name,\n      x: 10,\n      y: 10,\n      instance: <DashboardContainer key={id} id={id} type={item.component} />,\n    };\n    setElements2([ ...elements2,  model ]);\n  };\n\n  const clear = useCallback(() => {\n    dashboardapi.clear(1, () => {\n      setElements2((currentElements) => ([]));\n      setPathes((currentPathes) => []);\n    });\n  }, []);\n\n  const add_path = () => {\n    const id = uuidv4();\n    const data = [\n      [100, 10],\n      [100, 110],\n    ];\n    setPathes([...pathes, { id, path: data, instance: <Path id={id} coordinates={data} condition={null} max_x={width} max_y={height} /> }]);\n  };\n\n  const get_data = (id) => {\n    return elements[id];\n  };\n\n  const is_selected = (id) => {\n    return selected?.id === id;\n  };\n\n  const save = () => {\n    let e = elements2.map((value) => ({ id: value.id, name: value.name, x: value.x, y: value.y, type: value.type, props: { ...value.props } }));\n    let p = pathes.map((value) => ({ id: value.id, coordinates: value.coordinates, condition: value.condition }));\n    dashboardapi.save(1, { elements: e, pathes: p }, () => {\n      \n    });\n  };\n\n  const value = {\n    state: {\n      current,\n      width,\n      height,\n      elements2,\n      elements,\n      pathes,\n      selected,\n      widgets,\n      widget_list,\n      draggable,\n      selectedPath,\n    },\n    actions: {\n      setCurrent,\n      setWidth,\n      setHeight,\n      add,\n      add_path,\n      setSelected,\n      get_data,\n      is_selected,\n      clear,\n      setElements2,\n      remove,\n      update_default_prop,\n      update_prop,\n      update_path_condition,\n      update_coordinates,\n      setDraggable,\n      update_path,\n      load,\n      setSelectedPath,\n      save,\n    },\n  };\n\n  return <DashboardContext.Provider value={value}>{children}</DashboardContext.Provider>;\n};\n\nexport const Dashboard = ({ width, height }) => {\n  const parentRef = useRef(null);\n  const { actions, state } = useContext(DashboardContext);\n\n  useEffect(() => {\n    if (parentRef.current) {\n      let parentHeight = parentRef.current.offsetHeight;\n      let parentWidth = parentRef.current.offsetWidth;\n      actions.setWidth(parentWidth);\n      actions.setHeight(parentHeight);\n      actions.load(parentWidth, parentHeight);\n    }\n  }, [parentRef]);\n\n\n  return (\n    <div>\n      \n      <div style={{ display: \"flex\", flexDirection: \"row\", width: \"100%\" }}>\n        {state.draggable ? <DashboardWidgetList /> : null}\n        <div\n          onPointerDown={() => {\n            actions.setSelected((current) => null);\n            actions.setSelectedPath((current) => null);\n          }}\n          ref={parentRef}\n          style={{\n            position: \"relative\",\n            backgroundColor: \"#272227\",\n            width,\n            height,\n          }}\n        >\n          {state.elements2.map((value, index) => value.instance)}\n          <svg style={{ position: \"absolute\", pointerEvents: \"none\" }} width={width} height={height} viewBox={`0 0 ${width} ${height}`}>\n            {state.pathes.map((value) => value.instance)}\n          </svg>\n          <div style={{ position: \"absolute\", top: 0, right: 0 }}>\n            \n            {state.draggable ? \n            \n            <DeleteDialog\n        \n            title=\"Clear Dashboard\"\n            message=\"Do you want to clear the Dashboard\"\n            callback={() => {\n              actions.clear();\n            }}\n          />\n\n            : \"\" }\n            {state.draggable ? <IconButton onClick={() => actions.save()}><SaveIcon/></IconButton> : \"\" }\n            <IconButton onClick={() => actions.setDraggable(!state.draggable)}>{state.draggable ? <LockOpenIcon /> : <LockIcon />}</IconButton>\n          </div>\n        </div>\n        {state.draggable ? <DashboardLayer /> : null}\n      </div>\n    </div>\n  );\n};\n\nexport const useDraggable = () => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return state.draggable;\n  }, [state.draggable]);\n  return value;\n};\n\nexport const useModel = (id) => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {    \n    return state.elements2.find((item) => item.id === id)\n  }, [state, state.elements2, id]);\n  return value;\n};\n\nexport const useSelected = (id) => {\n  const { state } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return state.selected?.id === id;\n  }, [ state.selected ]);\n  return value;\n};\n\nexport const useDashboard = (Context) => {\n  const { state, actions } = useContext(DashboardContext);\n  const value = useMemo(() => {\n    return { state, actions}\n  }, [ state ]);\n  return value;\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/icons/CBPiSensorIcon.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/SensorTable.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/mashprofile/SortButton.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/KettleSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/logapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/GlobalKeyPress.js",["397"],"import { useState, useEffect } from \"react\";\n\nexport const isInputDOMNode = (e) => {\n  const target = e?.target;\n  return [\"INPUT\", \"SELECT\", \"TEXTAREA\", \"BUTTON\"].includes(target?.nodeName) || target?.hasAttribute(\"contenteditable\");\n};\n\nconst useKeyPress = (key) => {\n  const [keyPressed, setKeyPressed] = useState(false);\n\n  useEffect(() => {\n    const downHandler = (e) => {\n      if (!isInputDOMNode(e) && key === e.keyCode) {\n        setKeyPressed(() => true);\n      }\n    };\n\n    const upHandler = (e) => {\n      if (!isInputDOMNode(e) && key === e.keyCode) {\n        setKeyPressed(() => false);\n      }\n    };\n\n    const resetHandler = () => setKeyPressed(false);\n\n    window.addEventListener(\"keydown\", downHandler);\n    window.addEventListener(\"keyup\", upHandler);\n    window.addEventListener(\"blur\", resetHandler);\n\n    return () => {\n      window.removeEventListener(\"keydown\", downHandler);\n      window.removeEventListener(\"keyup\", upHandler);\n      window.removeEventListener(\"blur\", resetHandler);\n    };\n  }, [setKeyPressed]);\n  return keyPressed;\n};\n\nexport default useKeyPress;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/Elements.js",["398","399"],"import IconButton from \"@material-ui/core/IconButton\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport React, { useContext, useState, useMemo} from \"react\";\nimport Draggable from \"react-draggable\";\nimport \"../../App.css\";\nimport \"../../led.css\";\nimport { DashboardContext, useModel } from \"./DashboardContext\";\n\nexport const DashboardContainer = ({ name, id, index, type }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected = actions.is_selected(id);\n  const model = useModel(id)\n  const [x, setX] = useState(model.x);\n  const [y, setY] = useState(model.y);\n\n  let inputStyle = { position: \"absolute\"};\n\n  if (selected === true) {\n    inputStyle = { ...inputStyle, borderRadius: 5, border: \"1px solid rgba(142, 250, 0, .5)\" };\n  }\n  const draggable = state.draggable;\n\n  const Widget = type;\n\n  \n  const handleDrag = (e, ui) => {\n    setX(x + ui.deltaX);\n    setY(y + ui.deltaY);\n    //actions.update_default_prop(id, \"x\", x + ui.deltaX);\n    //actions.update_default_prop(id, \"y\", y + ui.deltaY);\n  };\n\n  const stopDrag = () => {\n    console.log(x, y)\n    actions.update_coordinates(id, x, y)\n  }\n\n  const select = (e) => {\n    if (!draggable) {\n      return;\n    }\n    e.stopPropagation();\n    actions.setSelected(()=>({ type: \"E\", id }));\n  };\n\n  const render_icons = () => {\n    if (selected) {\n      return (\n        <>\n          <div style={{ position: \"absolute\", top: -40, left: -40 }}>\n            <IconButton aria-label=\"delete\" color=\"primary\" variant=\"contained\" onPointerDown={() => actions.remove(id)}>\n              <DeleteIcon />\n            </IconButton>\n          </div>\n        </>\n      );\n    }\n  \n  };\n\n  return (\n    <Draggable disabled={!draggable} onStop={stopDrag} onDrag={handleDrag} bounds=\"parent\" grid={[5, 5]} defaultPosition={{ x, y }}>\n      <div onPointerDown={select} style={inputStyle}>\n        { typeof type === 'string' ? <div><img className=\"no-drag\" width={model.props?.width} height={model.props?.height}  src={type}/></div> :\n        <Widget id={id} width={model.props?.width} height={model.props?.height} />}\n        {render_icons()}\n      </div>\n    </Draggable>\n  );\n \n};\n\n//\n\n\n\n\n\n\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardWidgetList.js",["400","401","402","403"],"import { Collapse, ListItemIcon, makeStyles, Paper, Tooltip } from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport AppsIcon from \"@material-ui/icons/Apps\";\nimport React, { useContext } from \"react\";\nimport \"../../App.css\";\nimport { CBPiGrainIcon, CBPiHopsIcon, CBPiLiquidIcon, CBPiPipeIcon, CBPiYeastIcon } from \"../util/icons/CBPiSensorIcon\";\nimport { DashboardContext } from \"./DashboardContext\";\nconst useStyles = makeStyles((theme) => ({\n  active: {\n    backgroundColor: \"red\",\n  },\n  icon: {\n    minWidth: \"30px\",\n  },\n  largeIcon: {\n    width: 60,\n    height: 60,\n  },\n\n}));\n\nconst Icon = ({ icon }) => {\n  const WidgetIcon = icon;\n  return <WidgetIcon />;\n};\n\nconst DashboardSidebarListItem = ({ item }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected = state.selected === item.id;\n\n  const classes = useStyles();\n  return (\n    <Tooltip title={item.name} placement=\"right\">\n    <ListItem\n      key={item.id}\n      button\n      selected={selected}\n      onClick={() => {\n        actions.add(item);\n      }}\n    >\n      <ListItemIcon className={classes.icon}>{item.icon ? <Icon icon={item.icon} /> : null}</ListItemIcon>\n    \n    </ListItem></Tooltip>\n  );\n};\n\nconst DashboardWidgetList = () => {\n  const { actions, state } = useContext(DashboardContext);\n  const [open, setOpen] = React.useState(true);\n  const classes = useStyles();\n  const handleClick = () => {\n    setOpen(!open);\n  };\n\n  return (\n    <Paper >\n      <List component=\"nav\" disableGutters={true} dense aria-label=\"\">\n        <ListItem disablePadding key=\"path\" button onClick={handleClick} innerDivStyle={{ paddingLeft: 10 }} selected={open}>\n          <ListItemIcon className={classes.icon}>\n            <AppsIcon />\n          </ListItemIcon>\n        </ListItem>\n\n        <Collapse in={open} timeout=\"auto\" unmountOnExit>\n          <List component=\"div\" dense disablePadding>\n            {state.widget_list.map((item) => (\n              <DashboardSidebarListItem key={item.name} item={item} />\n            ))}\n            <ListItem\n              key=\"path\"\n              button\n              onClick={() => {\n                actions.add_path();\n              }}\n            >\n              <ListItemIcon className={classes.icon}><CBPiPipeIcon/></ListItemIcon>\n              \n            </ListItem>\n            \n          </List>\n        </Collapse>\n      </List>\n      \n    </Paper>\n  );\n};\n\nexport default DashboardWidgetList;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/DeleteDialog.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/dashboardapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/DashboardLayer.js",["404","405","406","407","408","409","410","411"],"import { Checkbox, InputAdornment, ListItemSecondaryAction, TextField, Typography } from \"@material-ui/core\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport CropSquareIcon from \"@material-ui/icons/CropSquare\";\nimport CheckBoxIcon from '@material-ui/icons/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank';\nimport React, { useContext, useEffect, useState } from \"react\";\nimport { useActor } from \"../data\";\nimport ActorSelect from \"../util/ActorSelect\";\nimport KettleSelect from \"../util/KettleSelect\";\nimport { SelectInput } from \"../util/SelectInput\";\nimport SensorSelect from \"../util/SensorSelect\";\nimport WidgetSelet from \"../util/WidgetSelect\";\nimport { DashboardContext, useModel } from \"./DashboardContext\";\nimport { widget_list } from \"./widgets/config\";\nimport { Container, Draggable } from \"react-smooth-dnd\";\nimport DragHandleIcon from \"@material-ui/icons/DragHandle\";\nimport { arrayMove } from \"../util/arraymove\";\n\nconst DashboardLayerListItem = ({ item }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected = state.selected?.id === item.id;\n\n  return (\n    <Draggable key={item.id}>\n    <ListItem className=\"drag-handle\" button selected={selected} onClick={() => actions.setSelected(() => ({ type: \"E\", id: item.id }))}>\n      <ListItemText primary={item.name} />\n      \n    </ListItem>\n    </Draggable>\n  );\n};\n\nconst DashboardLayerList = () => {\n  const { state, actions } = useContext(DashboardContext);\n  const data = state.elements2;\n  const [items, setItems] = useState([\n    { id: \"1\", text: \"Item 1\" },\n    { id: \"2\", text: \"Item 2\" },\n    { id: \"3\", text: \"Item 3\" },\n    { id: \"4\", text: \"Item 4\" }\n  ]);\n\n  const onDrop = ({ removedIndex, addedIndex }) => {\n    console.log(removedIndex,addedIndex)\n    const data = arrayMove(state.elements2, removedIndex, addedIndex)\n    console.log(data)\n    actions.setElements2((current) => [...data])\n  };\n\n\n  return (\n    <>\n      <div className=\"section_header\">Layer</div>\n      <div\n        style={{\n          padding: 5,\n          scrollbarColor: \"dark\",\n          maxHeight: 300,\n          overflowY: \"scroll\",\n        }}\n      >\n        <List component=\"nav\" disableGutters={true} dense >\n        <Container dragHandleSelector=\".drag-handle\" lockAxis=\"y\" onDrop={onDrop}>\n          {data.map((e, index) => (\n            <DashboardLayerListItem key={index} item={e} />\n          ))}\n           </Container>\n        </List>\n        \n      </div>\n    </>\n  );\n};\n\nconst DashboardLayer = () => {\n  return (\n    <div>\n      <div\n        onPointerDown={(e) => e.stopPropagation()}\n        className=\"box\"\n        style={{\n          width: 200,\n          overflow: \"hidden\",\n          fontFamily: \"JetBrains Mono\",\n          backgroundColor: \"#2c282e\",\n          color: \"#fff\",\n          borderRadius: 5,\n        }}\n      >\n        <div className=\"handle\">\n          <b>Settings</b>\n        </div>\n\n        <DashboardLayerList />\n\n        <DashboardProps />\n      </div>\n    </div>\n  );\n};\n\nconst PropsEditor = ({ data }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected_id = state.selected?.id;\n  if (!data || !selected_id) {\n    return \"\";\n  }\n  const type_spec = widget_list.find((item) => item.type === data.type);\n\n\n  const handlechange = (e, key) => {\n    actions.update_prop(selected_id, key, e.target.value);\n  };\n\n  const handlechange_number = (e, key) => {\n    \n    actions.update_prop(selected_id, key, parseInt(e.target.value));\n  };\n\n\n  return type_spec.props.map((s) => {\n    const unit = s.unit ? { endAdornment: <InputAdornment position=\"end\">{s.unit}</InputAdornment> } : {};\n\n    switch (s.type) {\n      case \"text\":\n        return <TextField variant="standard"InputProps={unit} label={s.name} key={s.name} fullWidth onChange={(e) => handlechange(e, s.name)} value={data.props[s.name]} />;\n      case \"number\":\n          return <TextField variant="standard"type=\"number\" InputProps={unit} label={s.name} key={s.name} fullWidth onChange={(e) => handlechange_number(e, s.name)} value={data.props[s.name]} />;\n      case \"select\":\n        return <SelectInput label={s.name} value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} options={s?.options || []} />;\n      case \"actor\":\n        return <ActorSelect value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"sensor\":\n        return <SensorSelect value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"kettle\":\n        return <KettleSelect fullWidth value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      case \"widget\":\n        return <WidgetSelet value={data.props[s.name]} key={s.name} onChange={(e) => handlechange(e, s.name)} />;\n      default:\n        return \"\";\n    }\n  });\n};\n\nconst PathSettingsItem = ({ item, checked, handleToggle }) => {\n  return (\n    <ListItem button onClick={handleToggle(item.id)}>\n      <ListItemIcon>\n        <Checkbox edge=\"start\" checked={checked.indexOf(item.id) !== -1} tabIndex={-1} color=\"primary\" disableRipple inputProps={{ \"aria-labelledby\": \"A\" }} />\n      </ListItemIcon>\n      <ListItemText primary={item.name} />\n\n    </ListItem>\n  );\n};\n\nconst PathSettings = () => {\n  const { state, actions } = useContext(DashboardContext);\n  const actor = useActor();\n  const selected_id = state.selected?.id;\n  const [selectedType, setSelectedType] = useState(null);\n  const [checked, setChecked] = React.useState([]);\n  const [checkedRight, setCheckedRight] = React.useState([]);\n\n  useEffect(() => {\n    const item = state.pathes.find((e) => e.id === selected_id);\n    setChecked((current) => item?.condition?.left || []);\n    setCheckedRight((current) => item?.condition?.right || []);\n  }, [selected_id]);\n\n  const handleToggle = (value, direction = \"left\") => () => {\n    if (direction === \"left\") {\n      const currentIndex = checked.indexOf(value);\n      const newChecked = [...checked];\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n      setChecked(newChecked);\n      actions.update_path_condition(selected_id, {left: newChecked, right: checkedRight});\n    } else {\n      const currentIndex = checkedRight.indexOf(value);\n      const newChecked = [...checkedRight];\n\n      if (currentIndex === -1) {\n        newChecked.push(value);\n      } else {\n        newChecked.splice(currentIndex, 1);\n      }\n      setCheckedRight(newChecked);\n      actions.update_path_condition(selected_id, {left: checked, right: newChecked});\n    }\n  };\n\n  useEffect(() => {\n    setSelectedType(() => state.selected?.type);\n  }, [state.selected]);\n\n  if (selectedType !== \"P\") {\n    return \"\";\n  }\n\n  return (\n    <>\n      <div\n        style={{\n          padding: 5,\n          scrollbarColor: \"dark\",\n          maxHeight: 300,\n          overflowY: \"scroll\",\n        }}\n      >\n        Flow Left\n        <List disableGutters={true} dense component=\"nav\" aria-label=\"main mailbox folders\">\n          {actor.map((item) => (\n            <PathSettingsItem item={item} checked={checked} handleToggle={handleToggle} />\n          ))}\n        </List>\n        Flow Right\n        <List disableGutters={true} dense component=\"nav\" aria-label=\"main mailbox folders\">\n          {actor.map((item) => (\n            <PathSettingsItem item={item} checked={checkedRight} handleToggle={(id) => handleToggle(id, \"right\")} />\n          ))}\n        </List>\n      </div>\n    </>\n  );\n};\n\nexport const DashboardProps = () => {\n  const { state, actions } = useContext(DashboardContext);\n  const selected_id = state.selected?.id;\n  const data = useModel(selected_id);\n\n  const handleChange = (e, key) => {\n    actions.update_default_prop(selected_id, key, e.target.value);\n  };\n  const render_form = (data) => {\n    if (!data) {\n      return \"\";\n    }\n\n    return <TextField variant="standard"label=\"Name\" fullWidth value={data?.name} onChange={(e) => handleChange(e, \"name\")} />;\n  };\n\n  return (\n    <div onPointerDown={(e) => e.stopPropagation()}>\n      <div className=\"section_header\">Properties</div>\n      <div style={{ padding: 10 }}>\n        {render_form(data)}\n\n        <PropsEditor data={data} />\n        <PathSettings />\n        <Typography variant=\"caption\" display=\"block\" gutterBottom>\n          {data?.x || \"0\"}px / {data?.y || \"0\"}px\n        </Typography>\n      </div>\n    </div>\n  );\n};\n\nexport default DashboardLayer;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/config.js",["412"],"import ListIcon from '@material-ui/icons/List';\nimport QueryBuilderIcon from '@material-ui/icons/QueryBuilder';\nimport ShowChartIcon from '@material-ui/icons/ShowChart';\nimport TextFieldsIcon from '@material-ui/icons/TextFields';\nimport ToggleOffIcon from '@material-ui/icons/ToggleOff';\nimport { CBPiCalculatorIcon, CBPiControlIcon, CBPiKettle, CBPiKettle2Icon, CBPiLedIcon, CBPiLiquidIcon, CBPiSensorIcon, CBPiSVGIcon, CBPiTankIcon, CBPiThermometerIcon } from '../../util/icons/CBPiSensorIcon';\nimport { DashboardButton } from \"./Button\";\nimport { Calculator } from \"./Calculator\";\nimport Chart from \"./Chart\";\nimport { Clock } from \"./Clock\";\nimport CustomSVG from \"./CustomSVG\";\nimport { KettleControl } from \"./KettleControl\";\nimport { Led } from \"./Led\";\nimport { Liquid } from './Liquid';\nimport { SensorData } from \"./SensorData\";\nimport Steps from \"./Steps\";\nimport KettleSVG from \"./svg/kettle.svg\";\nimport TankSVG from \"./svg/tank2.svg\";\nimport { TargetTemp } from \"./TargetTemp\";\nimport { Text } from \"./Text\";\nexport const widget_list = [\n  {\n    name: \"Kettle\",\n    type: \"Kettle\",\n    icon: CBPiKettle2Icon,\n    component: KettleSVG,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit: \"px\" },\n      { name: \"heigth\", default: \"150\", type: \"text\", unit: \"px\" },\n    ],\n  },\n  {\n    name: \"Tank\",\n    type: \"Tank\",\n    icon: CBPiTankIcon,\n    component: TankSVG,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit: \"px\" },\n      { name: \"heigth\", default: \"150\", type: \"text\", unit: \"px\" },\n    ],\n  },\n  {\n    name: \"Text\",\n    type: \"Text\",\n    icon: TextFieldsIcon,\n    component: Text,\n    props: [\n      { name: \"size\", default: \"10\", type: \"text\", unit: \"pt\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n  {\n    name: \"TargetTemp\",\n    type: \"TargetTemp\",\n    component: TargetTemp,\n    icon: CBPiThermometerIcon,\n    props: [\n      { name: \"kettle\", default: \"1\", type: \"kettle\" },\n      { name: \"unit\", default: \"°\", type: \"text\" },\n      { name: \"size\", default: \"12\", type: \"text\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n\n  {\n    name: \"Sensor Data\",\n    type: \"Sensor\",\n    component: SensorData,\n    icon: CBPiSensorIcon,\n    props: [\n      { name: \"sensor\", default: \"\", type: \"sensor\" },\n      { name: \"unit\", default: \"°\", type: \"text\" },\n      { name: \"size\", default: \"12\", type: \"text\", unit: \"pt\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n  {\n    name: \"Actor\",\n    type: \"ActorButton\",\n    component: DashboardButton,\n    icon: ToggleOffIcon,\n    props: [{ name: \"actor\", default: \"\", type: \"actor\" },{ name: \"action\", options: [\"yes\", \"no\"], default: \"\", type: \"select\" }],\n  },\n  {\n    name: \"Led\",\n    type: \"Led\",\n    component: Led,\n    icon: CBPiLedIcon,\n    props: [{ name: \"actor\", default: \"\", type: \"actor\" }],\n  },\n\n  {\n    name: \"Steps\",\n    type: \"Steps\",\n    component: Steps,\n    icon: ListIcon,\n    props: [{ name: \"width\", default: \"200\", type: \"text\", unit: \"px\" }],\n  },\n  {\n    name: \"SVG\",\n    type: \"CustomSVG\",\n    component: CustomSVG,\n    icon: CBPiSVGIcon,\n    props: [\n      { name: \"width\", default: \"100\", type: \"text\", unit:\"px\"  },\n      { name: \"name\", default: \"\", type: \"widget\" },\n    ],\n  },\n  {\n    name: \"KettleControl\",\n    type: \"KettleControl\",\n    icon: CBPiControlIcon,\n    component: KettleControl,\n    \n    props: [\n      { name: \"kettle\", default: \"1\", type: \"kettle\" },\n      { name: \"orientation\", options: [\"horizontal\", \"vertical\"], default: \"\", type: \"select\" },\n    ],\n  },\n  {\n    name: \"Clock\",\n    type: \"Clock\",\n    component: Clock,\n    icon: QueryBuilderIcon,\n    props: [\n      { name: \"size\", default: \"10\", type: \"text\", unit: \"pt\" },\n      { name: \"showDate\", options: [\"yes\", \"no\"], default: \"\", type: \"select\" },\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n    ],\n  },\n  {\n    name: \"Chart\",\n    type: \"Chart\",\n    component: Chart,\n    icon: ShowChartIcon,\n    props: [\n      { name: \"sensor\", default: \"\", type: \"sensor\" },\n      { name: \"linecolor\", default: \"#00FF00\", type: \"text\" },\n      { name: \"refresh\", default: 10, type: \"number\" },\n      { name: \"width\", default: 100, type: \"text\" }, { name: \"height\", default: 100, type: \"text\" }\n    ],\n  },\n  {\n    name: \"Calculator\",\n    type: \"Calculator\",\n    icon: CBPiCalculatorIcon,\n    component: Calculator,\n    props: [\n      \n      { name: \"type\", options: [\"total\", \"fromtop\"], default: \"\", type: \"select\" },\n      { name: \"diameter\", default: 40, type: \"number\" },\n      { name: \"height\", default: 40, type: \"number\" }\n    ],\n  },\n  {\n    name: \"Liquid\",\n    type: \"Liquid\",\n    icon: CBPiLiquidIcon,\n    component: Liquid,\n    props: [\n      { name: \"color\", default: \"#fff\", type: \"text\" },\n      { name: \"width\", default: 40, type: \"number\" },\n      { name: \"height\", default: 40, type: \"number\" },\n      { name: \"sensor\", default: \"\", type: \"sensor\" }\n    ],\n  }\n  \n\n  \n];\n\n/*\n{\n    name: \"Chart\",\n    type: \"Chart\",\n    component: Chart,\n    props: [{ name: \"width\", default: 100, type: \"text\" }, { name: \"height\", default: 100, type: \"text\" }],\n  },\n*/\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Path.js",["413"],"import React, { useContext, useEffect, useState } from \"react\";\nimport { useActor } from \"../../data\";\nimport classNames from 'classnames';\nimport { DashboardContext } from \"../DashboardContext\";\n\nexport const Path = ({ id, coordinates, condition = null, stroke = 10, max_x = 400, max_y = 600 }) => {\n  const { state, actions } = useContext(DashboardContext);\n  const actor = useActor();\n  const [data, setData] = useState(coordinates);\n  const [dragging, setDragging] = useState(false);\n  const [origin, setOrigin] = useState({ x: 0, y: 0 });\n  const [active, setActive] = useState(false);\n  const [flowLeft, setFlowLeft] = useState(false)\n  const [flowRight, setFlowRight] = useState(false)\n \n\n  useEffect(() => {\n    \n    const actor_cache = actor.reduce((obj, item) => {\n      obj[item.id] = item.state;\n      return obj;\n    }, {});\n\n    const p = state.pathes.find((e) => e.id === id);\n    if (!p.condition?.left || p.condition?.left.length === 0) {\n      setFlowLeft(false)\n    } else {\n      setFlowLeft(p.condition?.left.reduce((sum, next) => sum && actor_cache[next], true));\n    }\n\n    if (!p.condition?.right || p.condition?.right.length === 0) {\n      setFlowRight(false)\n    } else {\n      setFlowRight(p.condition?.right.reduce((sum, next) => sum && actor_cache[next], true));\n    }\n  }, [actor]);\n\n  const draggable = state.draggable;\n  const gen_path = () => {\n    let path_string = \"\";\n    for (const [index, value] of data.entries()) {\n      const [x, y] = value;\n      index === 0 ? (path_string += \"M \") : (path_string += \" L \");\n      path_string += x;\n      path_string += \" \";\n      path_string += y;\n    }\n    return path_string;\n  };\n\n  const add_point = (e, index, x, y) => {\n    e.stopPropagation();\n    e.preventDefault();\n    const d2 = [...data.slice(0, index + 1), [x, y], ...data.slice(index + 1)];\n    setData([...d2]);\n  };\n\n  const remove_point = (index) => {\n    data.splice(index, 1);\n    setData([...data]);\n  };\n\n  const render_handles = () => {\n    const len = data.length;\n    let result = [];\n    for (const [index, value] of data.entries()) {\n      if (index < len - 1) {\n        const [x, y] = value;\n        const [next_x, next_y] = data[index + 1];\n        const x_point = (x + next_x) / 2;\n        const y_point = (y + next_y) / 2;\n        result.push(\n          <g>\n            <circle onPointerDown={(e) => add_point(e, index, x_point, y_point)} cx={x_point} cy={y_point} fillOpacity=\"0.4\" r={12} />\n            <text x={x_point} y={y_point} textAnchor=\"middle\" fontSize=\"20px\" fill=\"#fff\" alignmentBaseline=\"central\">\n              +\n            </text>\n          </g>\n        );\n      }\n    }\n    return result;\n  };\n\n  const down = (e, index) => {\n    e.stopPropagation();\n    const el = e.target;\n    el.setPointerCapture(e.pointerId);\n    setOrigin({ x: data[index][0], y: data[index][1], clientX: e.clientX, clientY: e.clientY });\n    setDragging(true);\n  };\n\n  const up = (e, index) => {\n    e.stopPropagation();\n    setDragging(false);\n    actions.update_path(id, data);\n  };\n  const move = (e, index) => {\n    e.stopPropagation();\n    e.preventDefault();\n    if (dragging) {\n      const delta_x = e.clientX - origin.clientX;\n      const detal_y = e.clientY - origin.clientY;\n      const data2 = [...data[index]];\n\n      if (origin.x + delta_x < 0) {\n        data2[0] = 0;\n      } else if (origin.x + delta_x > max_x) {\n        data2[0] = max_x;\n      } else {\n        const t = origin.x + delta_x;\n        data2[0] = origin.x + delta_x - (t % 5);\n      }\n\n      if (origin.y + detal_y < 0) {\n        data2[1] = 0;\n      } else if (origin.y + detal_y > max_y) {\n        data2[1] = max_y;\n      } else {\n        const t2 = origin.y + detal_y;\n        data2[1] = origin.y + detal_y - (t2 % 5);\n      }\n      const d2 = [...data.slice(0, index), data2, ...data.slice(index + 1)];\n      setData([...d2]);\n    }\n  };\n\n  const handle = () => {\n    return data.map((p, index) => (\n      <g key={index}>\n        <circle cx={p[0]} cy={p[1]} r=\"5\" fill=\"#8efa00\" />\n        <circle\n          onDoubleClick={() => {\n            remove_point(index);\n          }}\n          onPointerMove={(e) => move(e, index)}\n          onPointerDown={(e) => down(e, index)}\n          onPointerUp={(e) => up(e, index)}\n          cx={p[0]}\n          cy={p[1]}\n          r=\"20 \"\n          fill=\"#8efa00\"\n          fillOpacity=\"0.1\"\n        />\n        <text x={p[0]} y={p[1]} textAnchor=\"middle\"   fontWeight=\"bold\" fontSize=\"10px\" fill=\"#000\" alignmentBaseline=\"central\">\n              {index === 0 ? \"L\": \"\"}\n              {index === data.length-1 ? \"R\": \"\"}\n            </text>\n      </g>\n    ));\n  };\n\n  const select = (e) => {\n    if (!draggable) {\n      return;\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    setActive(!active);\n    //actions.setSelectedPath((current) => ({ type: \"P\", id }));\n    actions.setSelected((current) => ({ type: \"P\", id }));\n  };\n\n  const glow = () => (is_acktive() ? \"10%\" : \"0%\");\n  const is_acktive = () => actions.is_selected(id);\n  const animation = classNames({ flowLeft: flowLeft }, { flowRight: flowRight });\n  return (\n    <>\n      <g key={id}>\n        <path d={gen_path()} id=\"1\" fill=\"none\" stroke=\"#9A9A9A\" strokeLinejoin=\"round\" strokeWidth={stroke} pointerEvents=\"stroke\"></path>\n        <path className={animation} strokeLinejoin=\"round\" d={gen_path()} fill=\"none\" stroke=\"#4A4A4A\" strokeWidth={stroke - 2} strokeMiterlimit=\"10\" pointerEvents=\"stroke\"></path>\n        <path onPointerDown={(e) => select(e)} d={gen_path()} fill=\"none\" strokeOpacity={glow()} stroke=\"blue\" strokeLinejoin=\"round\" strokeWidth={stroke + 10} pointerEvents=\"stroke\"></path>\n        {is_acktive() ? handle() : \"\"}\n        {is_acktive() ? render_handles() : \"\"}\n      </g>\n    </>\n  );\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorValue.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/arraymove.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/WidgetSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SelectInput.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Text.js",["414"],"\nimport React, { useContext } from \"react\";\nimport { DashboardContext, useModel } from \"../DashboardContext\";\n\nexport const Text = ({ id }) => {\n    const { actions } = useContext(DashboardContext);\n    const data = useModel(id)\n    const css_style = { color: data?.props?.color || \"#fff\", fontSize: `${data?.props?.size}px` };\n    return <div style={css_style}> {data?.name} </div>;\n  };","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/TargetTemp.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/SensorData.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Liquid.js",["415","416","417","418","419"],"import { useEffect, useState } from \"react\";\nimport { useCBPi } from \"../../data\";\nimport { useDraggable, useModel } from \"../DashboardContext\";\n\nconst hexToRgb = (hex) => {\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result\n    ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16),\n      }\n    : {\n        r: 0,\n        g: 0,\n        b: 255,\n      };\n};\n\nexport const Liquid = ({ id }) => {\n  const model = useModel(id);\n  const { state } = useCBPi();\n  const [height, setHeight] = useState(model.props.height || 40);\n  const [width, setWidth] = useState(model.props.width || 40);\n  const [opacity, setOpacity] = useState(model.props.width || 0.9);\n  const [color, setColor] = useState(model.props.color || {r: 0, g:0, b:255});\n  const [percent, setPerent] = useState(model.props.percent || 0);\n  const [sensorid, setSensor] = useState(model.props.sensor || null);\n  const draggable = useDraggable();\n\n  useEffect(() => {\n    setHeight(model.props.height);\n    setWidth(model.props.width);\n    setPerent(model.props.percent);\n\n    const rgb = hexToRgb(model.props.color)\n    console.log(\"COLOR\", rgb)\n    setColor(rgb);\n\n\n  }, [model.props.height, model.props.width, model.props.percent, model.props.color, model.props.sensor]);\n\n  if (!sensorid) {\n    return <div>Missing Config</div>;\n  }\n  const data = parseInt(state?.sensorData[sensorid] || 0);\n\n\n\n  const style_box = { width: `${width}px`, height: `${height}px` };\n  const filling = parseFloat(height) * (parseFloat(data) / 100);\n  const style = { background: `rgba(${color.r}, ${color.g}, ${color.b}, 0.2)`, width: `${width}px`, height: `${filling}px` };\n  return (\n    <div style={style_box}>\n      <div style={{ ...style, position: \"absolute\", bottom: 0 }}></div>\n    </div>\n  );\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Steps.js",["420","421","422"],"import { Button, ButtonGroup, Divider, Grid, List, Paper, Typography } from \"@material-ui/core\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport CheckCircleIcon from \"@material-ui/icons/CheckCircle\";\nimport ErrorIcon from \"@material-ui/icons/Error\";\nimport PauseCircleOutlineIcon from \"@material-ui/icons/PauseCircleOutline\";\nimport PlayCircleFilledIcon from \"@material-ui/icons/PlayCircleFilled\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\nimport { default as React, useContext, useEffect, useState } from \"react\";\nimport { useCBPi } from \"../../data\";\nimport { stepapi } from \"../../data/stepapi\";\nimport ActorName from \"../../util/ActorName\";\nimport KettleName from \"../../util/KettleName\";\nimport MashControl from \"../../util/MashControl\";\nimport PropsEdit from \"../../util/PropsEdit\";\nimport SensorName from \"../../util/SensorName\";\nimport { DashboardContext, useDraggable, useModel } from \"../DashboardContext\";\nimport MenuBookIcon from \"@material-ui/icons/MenuBook\";\nimport { useHistory } from \"react-router-dom\";\nconst useStyles = makeStyles((theme) => ({\n  paper: {\n    [theme.breakpoints.up(600 + theme.spacing(3) * 2)]: {\n      marginTop: theme.spacing(1),\n      marginLeft: theme.spacing(0),\n      marginRight: theme.spacing(0),\n      marginBottom: theme.spacing(1),\n      padding: theme.spacing(1),\n    },\n  },\n}));\n\nconst StepProps = ({ config, data }) => {\n  if (!config) {\n    return <></>;\n  }\n\n  return config.map((e, index) => {\n    switch (e.type) {\n      case \"actor\":\n        return (\n          <Grid item xs={12} md={6} key={index}>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              {e.label}{\" \"}\n            </Typography>\n            <ActorName id={data[e.label]} />\n          </Grid>\n        );\n      case \"sensor\":\n        return (\n          <Grid item xs={12} md={6} key={index}>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              {e.label}\n            </Typography>\n            <SensorName id={data[e.label]} />\n          </Grid>\n        );\n      case \"kettle\":\n        return (\n          <Grid item xs={12} md={6} key={index}>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              {e.label}{\" \"}\n            </Typography>\n            <KettleName id={data[e.label]} />\n          </Grid>\n        );\n\n      default:\n        return (\n          <Grid item xs={12} md={6} key={index}>\n            <Typography variant=\"caption\" display=\"block\" gutterBottom>\n              {e.label}{\" \"}\n            </Typography>\n            {data[e.label]}\n          </Grid>\n        );\n    }\n  });\n};\n\nconst StepActionDialog = ({ action, config, open, onClose, onSubmit }) => {\n  const [props, setProps] = useState({});\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  return (\n    <Dialog open={open} fullWidth>\n      <DialogTitle id=\"simple-dialog-title\">{action.label}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <Grid container spacing={3}>\n            <PropsEdit config={action.parameters} onChange={onChangeProps} props={props} />\n          </Grid>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} variant=\"contained\" color=\"secondary\" autoFocus>\n          Close\n        </Button>\n        <Button onClick={() => onSubmit(props)} variant=\"contained\" color=\"Primary\" autoFocus>\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst StepActionButton = ({ item, action }) => {\n  const [open, setOpen] = React.useState(false);\n\n  const call_action = (id, action) => {\n    if (action.parameters.length > 0) {\n      setOpen(true);\n    } else {\n      stepapi.action(id, action.method, {});\n    }\n  };\n  const handleClose = () => {\n    setOpen(false);\n  };\n  const handleSubmit = (props) => {\n    setOpen(false);\n    stepapi.action(item.id, action.method, props);\n  };\n\n  return (\n    <>\n      <Button startIcon={<PlayCircleFilledIcon />} variant=\"contained\" color=\"primary\" fullWidth onClick={() => call_action(item.id, action)}>\n        {action.label}{\" \"}\n      </Button>\n      {action?.parameters ? <StepActionDialog action={action} open={open} onSubmit={handleSubmit} onClose={handleClose} /> : null}\n    </>\n  );\n};\n\nconst StepActionList = ({ type, item }) => {\n  return (\n    <ButtonGroup fullWidth orientation=\"vertical\">\n      {type.actions.map((action) => (\n        <StepActionButton item={item} action={action} />\n      ))}\n    </ButtonGroup>\n  );\n};\n\nfunction StepDetailsDialog(props) {\n  const { state } = useCBPi();\n  const { onClose, selectedValue, open, item } = props;\n  const [actions, setActions] = useState([]);\n  const [type, setType] = React.useState({});\n  const classes = useStyles();\n  const handleClose = () => {\n    onClose(selectedValue);\n  };\n\n  useEffect(() => {\n    const t = state.stepTypes.find((e) => e.name === item.type);\n    setType(t, {});\n    setActions(t?.actions || []);\n  }, [state.stepTypes]);\n\n  return (\n    <Dialog fullWidth onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogContent>\n        <Paper className={classes.paper}>\n          <Typography variant=\"h4\" gutterBottom>\n            {item.name}\n          </Typography>\n          <Typography variant=\"h6\" gutterBottom>\n            Parameter\n          </Typography>\n          <Grid container spacing={3}>\n            <StepProps config={type.properties} data={item.props} />\n          </Grid>\n        </Paper>\n        <Divider />\n        <Paper className={classes.paper}>\n          <Typography variant=\"h6\" gutterBottom>\n            Actions\n          </Typography>\n          <StepActionList item={item} type={type} />\n        </Paper>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={handleClose} variant=\"contained\" color=\"secondary\" autoFocus>\n          Close\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n}\n\nconst State = ({ state }) => {\n  switch (state) {\n    case \"I\":\n      return <RadioButtonUncheckedIcon />;\n    case \"A\":\n      return <CachedIcon color=\"primary\" />;\n    case \"E\":\n      return <ErrorIcon />;\n    case \"D\":\n      return <CheckCircleIcon color=\"primary\" />;\n    case \"S\":\n      return <PauseCircleOutlineIcon />;\n    default:\n      return \"\";\n  }\n};\n\nconst StepItem = ({ item }) => {\n  const [open, setOpen] = React.useState(false);\n  const [selectedValue, setSelectedValue] = React.useState(\"emails\");\n  const draggable = useDraggable();\n\n  const handleClickOpen = () => {\n    if (draggable) {\n      return;\n    }\n    setOpen(true);\n  };\n\n  const handleClose = (value) => {\n    setOpen(false);\n    setSelectedValue(value);\n  };\n\n  return (\n    <>\n      <ListItem button={!draggable} onClick={handleClickOpen}>\n        <ListItemIcon>\n          <State state={item.status} />\n        </ListItemIcon>\n        <ListItemText primary={item.name} secondary={item.state_text} />\n      </ListItem>\n      <StepDetailsDialog item={item} selectedValue={selectedValue} open={open} onClose={handleClose} />\n    </>\n  );\n};\n\nexport const Steps = ({ id }) => {\n  const { state: state2, actions } = useContext(DashboardContext);\n\n  const model = useModel(id);\n  const { state } = useCBPi();\n  const [profile, setProfile] = useState([]);\n  const history = useHistory();\n  const draggable = useDraggable()\n\n  useEffect(() => {\n    setProfile(state.mashProfile);\n  }, [state.mashProfile]);\n\n  let inputStyle = { color: \"#fff\", width: `${model?.props?.width}px`,fontSize: 12, backgroundColor: \"#2c282e\", padding: 5, borderRadius: 5 };\n\n  if( draggable) {\n    return <div className=\"box\" style={{...inputStyle, display:\"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n      <Typography variant=\"h6\">Mash Steps</Typography>\n    </div>\n  }\n\n  if (!state.mashBasic.name) {\n    return (\n      <div className=\"box\" style={{...inputStyle, display:\"flex\", justifyContent: \"center\", alignItems: \"center\"}}>\n        <Button\n          variant=\"outlined\"\n          color=\"primary\"\n          onClick={() => {\n            history.push(\"/recipes\");\n          }}\n          startIcon={<MenuBookIcon />}\n        >\n          Please select a Recipe\n        </Button>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"box\" style={inputStyle}>\n      <div style={{ marign: 20 }}>\n        <div className=\"section_header\">{state.mashBasic?.name}</div>\n        <MashControl disabled={state2.draggable} />\n        <List component=\"nav\" aria-label=\"main mailbox folders\">\n          {profile.map((row, index) => (\n            <StepItem item={row} key={index} />\n          ))}\n        </List>\n      </div>\n    </div>\n  );\n};\n\nexport default Steps;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Led.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/KettleControl.js",["423","424"],"import { Slider } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport DialogActions from \"@material-ui/core/DialogActions\";\nimport DialogContent from \"@material-ui/core/DialogContent\";\nimport DialogContentText from \"@material-ui/core/DialogContentText\";\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\nimport Typography from \"@material-ui/core/Typography\";\nimport CachedIcon from \"@material-ui/icons/Cached\";\nimport DriveEtaIcon from \"@material-ui/icons/DriveEta\";\nimport TrackChangesIcon from \"@material-ui/icons/TrackChanges\";\nimport WhatshotIcon from \"@material-ui/icons/Whatshot\";\nimport React, { useContext, useEffect, useMemo } from \"react\";\nimport { useCBPi, useKettle } from \"../../data\";\nimport { useActor } from \"../../data/index\";\nimport { DashboardContext, useModel } from \"../DashboardContext\";\n\n\n\nconst TargetTempDialog = ({ onClose, kettle, open }) => {\n  const [value, setValue] = React.useState(30);\n\n  const {actions} = useCBPi()\n  useEffect(()=>{\n    setValue(kettle?.target_temp)\n  },[])\n  if (!kettle) return \"\";\n\n  const handleClose = () => {\n    onClose();\n  };\n\n  const handleSet = () => {\n    actions.target_temp_kettle(kettle.id, value)\n    onClose();\n  };\n\n  \n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const marks = [\n    {\n      value: 0,\n      label: \"0°\",\n    },\n    {\n      value: 20,\n      label: \"20°\",\n    },\n    {\n      value: 37,\n      label: \"37°\",\n    },\n    {\n      value: 100,\n      label: \"100°\",\n    },\n  ];\n\n  return (\n    <Dialog fullWidth onClose={handleClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">Set Target Temp {kettle.name} </DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <Typography variant=\"h2\" component=\"h2\" gutterBottom>\n              {value}°\n            </Typography>\n          </div>\n          <Slider marks={marks} value={value} onChange={handleChange} aria-labelledby=\"continuous-slider\" />\n          <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"center\" }}>\n            <Button variant=\"contained\" onClick={handleClose} color=\"secondary\" autoFocus>\n              Cancel\n            </Button>\n            <Button variant=\"contained\" onClick={handleSet} color=\"primary\" autoFocus\n              >\n              Set\n            </Button>\n          </div>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions></DialogActions>\n    </Dialog>\n  );\n};\n\nexport const KettleControl = ({ id }) => {\n  const { state } = useContext(DashboardContext);\n  const [open, setOpen] = React.useState(false);\n  const model = useModel(id);\n  const cbpi = useCBPi();\n  const kettle = useKettle(model.props?.kettle);\n  const heater = useActor(kettle?.heater);\n  const agitator = useActor(kettle?.agitator);\n  const toggle = (id) => {\n    cbpi.actions.toggle_actor(id);\n  };\n  const toggle_kettle_logic = (id) => {\n    cbpi.actions.toggle_logic(id);\n  };\n\n  return useMemo(() => {\n    const orientation = model?.props?.orientation === \"horizontal\" ? \"horizontal\" : \"vertical\";\n\n    console.log(kettle?.state, heater?.state  )\n    return (\n      <>\n        <ButtonGroup disabled={state.draggable || !model.props.kettle} orientation={orientation} color=\"primary\" aria-label=\"contained primary button group\">\n          {heater ? <Button variant={heater?.state ? \"contained\" : \"\"} color=\"primary\" startIcon={<WhatshotIcon />} onClick={() => toggle(kettle?.heater)}></Button>: \"\"}\n          {agitator ? <Button variant={agitator?.state ? \"contained\" : \"\"} color=\"primary\" startIcon={<CachedIcon />} onClick={() => toggle(kettle?.agitator)}></Button> : \"\"}\n          {kettle?.type ? <Button variant={kettle?.state ? \"contained\" : \"\"} color=\"primary\" startIcon={<DriveEtaIcon />} onClick={() => toggle_kettle_logic(kettle?.id)}></Button> : \"\"}\n          <Button variant=\"\" color=\"primary\" onClick={() => setOpen(true)} startIcon={<TrackChangesIcon />}></Button>\n        </ButtonGroup>\n        <TargetTempDialog open={open} kettle={kettle} onClose={() => setOpen(false)} />\n      </>\n    );\n  }, [state.draggable, kettle, model.props.orientation, agitator, heater, open]);\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/CustomSVG.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Clock.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Chart.js",["425","426","427"],"import { ClickAwayListener, Dialog, DialogTitle, Divider, IconButton, List, ListItem, ListItemIcon, ListItemText, Paper, Popper } from \"@material-ui/core\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { useEffect, useRef, useState } from \"react\";\nimport Plot from \"react-plotly.js\";\nimport { logapi } from \"../../data/logapi\";\nimport { useDraggable, useModel } from \"../DashboardContext\";\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\nimport AutorenewIcon from '@material-ui/icons/Autorenew';\nimport DeleteIcon from \"@material-ui/icons/Delete\";\n\n\nconst ContextMenu = ({ open, handleClose, doRefresh }) => {\n  return <Dialog open={open} onClose={handleClose} aria-labelledby=\"simple-dialog-title\">\n\n<DialogTitle id=\"simple-dialog-title\">Chart</DialogTitle>\n      \n  </Dialog>;\n};\n\nconst Chart = ({ id }) => {\n  const [data, setData] = useState([]);\n  const model = useModel(id);\n  const draggable = useDraggable();\n  const [open, setOpen] = useState(false)\n  const anchorRef = useRef(null);\n  const [loading, setLoading] = useState(false)\n\n\n  useEffect(() => {\n    load_data()\n    const interval = setInterval(() => {\n      load_data()\n    }, (model.props?.refresh || 10) * 1000);\n    return () => clearTimeout(interval);\n  }, [model?.props?.sensor, model.props?.refresh, ]);\n\n  const load_data = () => {\n\n    const onSuccess = (data, id) => {\n      setLoading(false)\n      setData([\n        {\n          x: data.time,\n          y: data[id],\n          type: \"scatter\",\n          line: {\n            color: model?.props?.linecolor || \"#00FF00\",\n            width: 1,\n          },\n        },\n      ]);\n    };\n    if (model?.props?.sensor) {\n      setLoading(true)\n      logapi.get(model?.props?.sensor, onSuccess);\n    }\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const clear_data = () => {\n    logapi.clear(model?.props?.sensor, ()=>setData([]))\n  }\n\n  if (draggable === true) {\n    let css_style2 = {\n      display: \"flex\",\n      flexDirection: \"column\",\n      fontSize: \"20px\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      width: `${model?.props?.width}px`,\n      height: `${model?.props?.height}px`,\n    };\n    return (\n      <div className=\"box\" style={css_style2}>\n        <div>Chart {model.name}</div>\n        <div>{!model?.props?.sensor ? \"Missing Config\" : \"\"}</div>\n      </div>\n    );\n  }\n\n  if (!model?.props?.sensor) {\n    return <div>Config Missing</div>;\n  }\n\n  return (\n    <div className=\"box\">\n      {}\n      <Plot\n        data={data}\n        config={{ displayModeBar: false }}\n        layout={{\n          title: {\n            text: model.name,\n            font: {\n              family: \"Advent Pro\",\n              size: 12,\n              color: \"#fff\",\n            },\n          },\n          paper_bgcolor: \"rgba(0,0,0,0)\",\n          plot_bgcolor: \"rgba(0,0,0,0)\",\n          width: model.props?.width || 200,\n          height: model.props?.height || 200,\n\n          margin: {\n            l: 20,\n            r: 20,\n            b: 20,\n            t: 30,\n            pad: 0,\n          },\n          legend: {\n            x: 1,\n            xanchor: \"right\",\n            y: 1,\n            font: {\n              family: \"sans-serif\",\n              size: 8,\n              color: \"#fff\",\n            },\n          },\n          xaxis: {\n            showgrid: false,\n            tickfont: {\n              size: 8,\n              color: \"#fff\",\n            },\n          },\n          yaxis: {\n            showgrid: true,\n            tickfont: {\n              size: 8,\n              color: \"#fff\",\n            },\n          },\n        }}\n      />\n\n      <IconButton  ref={anchorRef} onClick={()=>setOpen(true)} size=\"small\" variant=\"contained\" style={{ position: \"absolute\", top: 5, right: 10 }}>\n        <MoreVertIcon />\n      </IconButton>\n      { loading ? <RotateLeftIcon fontSize=\"small\" style={{ position: \"absolute\", bottom: 10, right: 10 }} />: \"\"}\n\n      <Popper  open={open} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\n\n      <ClickAwayListener onClickAway={handleClose}>\n      <Paper>\n      <List>\n        <ListItem button color=\"secondary\" onClick={load_data} >\n          <ListItemIcon onClick={load_data}>\n            <AutorenewIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Refresh\" />\n        </ListItem>\n        <ListItem button color=\"secondary\" onClick={clear_data} >\n          <ListItemIcon onClick={clear_data}>\n            <DeleteIcon />\n          </ListItemIcon>\n          <ListItemText primary=\"Clear\" />\n        </ListItem>\n      </List>\n      </Paper>\n      </ClickAwayListener>\n      </Popper>\n      \n    </div>\n  );\n};\n\nexport default Chart;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Calculator.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/PropsEdit.js",["428","429"],"import { FormHelperText, Grid, InputLabel, MenuItem, Select, TextField } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport ActorSelect from \"./ActorSelect\";\nimport KettleSelect from \"./KettleSelect\";\nimport SensorSelect from \"./SensorSelect\";\n\nconst SelectInput = ({ label, description=\"\", options=[], value, onChange }) => {\n    return (\n      <>\n        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n          {label}\n        </InputLabel>\n        <Select fullWidth labelId=\"demo-simple-select-label\" id=\"demo-simple-select\" value={value} onChange={onChange}>\n        <MenuItem key=\"actor-non\" value=\"\">---</MenuItem>\n          {options.map((item) => (\n            <MenuItem key={item} value={item}>\n              {item}\n            </MenuItem>\n          ))}\n        </Select>\n        <FormHelperText>{description}</FormHelperText>\n      </>\n    );\n  };\n\n\nconst PropsEdit = ({ config, onChange = () => {}, data={}}) => {\n  useEffect(() => {}, [config, data]);\n\n  if (!config) {\n    return <></>;\n  }\n  \n  const render_input = (item) => {\n   \n    switch (item.type) {\n      case \"select\":\n        console.log(1,item.description)\n        return <SelectInput description={item.description} label={item.label} options={item.options} value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} />;\n      case \"kettle\":\n        return <KettleSelect description={item.description} value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} />;\n      case \"sensor\":\n        return <SensorSelect description={item.description} value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} />;\n      case \"actor\":\n        return <ActorSelect description={item.description} value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} />;\n      case \"number\":\n        return <TextField variant="standard"helperText={item.description}  value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} type=\"number\" label={item.label} fullWidth helperText={item.description}/>;\n      default:\n        return <TextField variant="standard"helperText={item.description} value={data[item.label]} onChange={(e) => onChange(item.label, e.target.value)} label={item.label} fullWidth helperText={item.description}/>;\n    }\n  };\n\n  return (\n    <>\n      {config.map((item) => (\n        <Grid item  lg={2} sm={4} xs={12} md={6} key={item.label}>\n          {render_input(item)}\n        </Grid>\n      ))}\n    </>\n  );\n};\n\nexport default PropsEdit;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/SensorName.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/MashControl.js",["430"],"import { Button, ButtonGroup } from \"@material-ui/core\";\nimport PlayCircleOutlineIcon from \"@material-ui/icons/PlayCircleOutline\";\nimport RotateLeftIcon from \"@material-ui/icons/RotateLeft\";\nimport StopIcon from \"@material-ui/icons/Stop\";\nimport { default as React, useEffect, useState } from \"react\";\nimport { useCBPi } from \"../data\";\nimport { stepapi } from \"../data/stepapi\";\nimport SkipNextIcon from '@material-ui/icons/SkipNext';\n\nconst MashControl = ({disabled=false}) => {\n  const { state } = useCBPi();\n  const [stop, setStop] = useState(null);\n  const [reset, setReset] = useState(null);\n  const [start, setStart] = useState(null);\n  const [next, setNext] = useState(null);\n\n  useEffect(() => {\n    if (state.mashProfile.filter((item) => item.status === \"D\").length === state.mashProfile.length) {\n      setStop(false);\n      setReset(true);\n      setStart(false);\n      setNext(false);\n      return;\n    }\n    if (state.mashProfile.filter((item) => item.status === \"I\").length === state.mashProfile.length) {\n      setStop(false);\n      setReset(false);\n      setStart(true);\n      setNext(false);\n      return;\n    }\n    if (state.mashProfile.find((item) => item.status === \"A\")) {\n      setStop(true);\n      setReset(false);\n      setStart(false);\n      setNext(true);\n    } else {\n      setStop(false);\n      setReset(true);\n      setStart(true);\n      setNext(true);\n    }\n  }, [state.mashProfile]);\n\n  if( state.mashProfile.length == 0) {\n    return <></>\n  }\n\n  return (\n    <>\n    <ButtonGroup disabled={disabled} fullWidth>\n      {start ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            stepapi.start();\n          }}\n          startIcon={<PlayCircleOutlineIcon />}\n        >\n          \n        </Button>\n      ) : null}\n\n      {next ? (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            stepapi.next();\n          }}\n          startIcon={<SkipNextIcon />}\n        >\n          \n        </Button>\n      ) : null}\n\n      {stop ? (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          startIcon={<StopIcon />}\n          onClick={() => {\n            stepapi.stop();\n          }}\n        >\n          \n        </Button>\n      ) : null}\n\n      {reset ? (\n        <Button startIcon={<RotateLeftIcon />} variant=\"contained\" color=\"secondary\" onClick={() => stepapi.reset()}>\n          \n        </Button>\n      ) : null}\n      </ButtonGroup>\n    </>\n  );\n};\n\nexport default MashControl;\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/KettleName.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorName.js",[],["431","432"],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/stepapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/dashboard/widgets/Button.js",["433","434","435","436"],"import { ButtonGroup, Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, Grid, List, ListItem, ListItemText } from \"@material-ui/core\";\nimport Button from \"@material-ui/core/Button\";\nimport React, { useMemo, useState } from \"react\";\nimport { useActor, useActorType, useCBPi } from \"../../data\";\nimport { useDraggable, useModel } from \"../DashboardContext\";\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\nimport { actorapi } from \"../../data/actorapi\";\nimport PropsEdit from \"../../util/PropsEdit\";\nimport Confetti from \"react-dom-confetti\";\n\nconst ButtonActionPropsDialog = ({ action = {}, config, open, onClose, onSubmit }) => {\n  const [props, setProps] = useState({});\n\n  const onChangeProps = (name, value) => {\n    setProps({ ...props, [name]: value });\n  };\n\n  return (\n    <Dialog open={open} fullWidth>\n      <DialogTitle id=\"simple-dialog-title\">{action.label}</DialogTitle>\n      <DialogContent>\n        <DialogContentText id=\"alert-dialog-description\">\n          <Grid container spacing={3}>\n            <PropsEdit config={action.parameters} onChange={onChangeProps} props={props} />\n          </Grid>\n        </DialogContentText>\n      </DialogContent>\n      <DialogActions>\n        <Button onClick={onClose} variant=\"contained\" color=\"secondary\" autoFocus>\n          Close\n        </Button>\n        <Button onClick={() => onSubmit(props)} variant=\"contained\" color=\"Primary\" autoFocus>\n          Submit\n        </Button>\n      </DialogActions>\n    </Dialog>\n  );\n};\n\nconst ActionButton = ({ action, actorid }) => {\n  const [open, setOpen] = useState(false);\n  const handle_action = (id, action) => {\n    actorapi.action(id, action.method, {});\n  };\n\n  const handleClose = () => setOpen(false);\n  const handle_submit = (props) => {\n      actorapi.action(actorid, action.method, props);\n      setOpen(false)          \n  }\n\n\n  if (action.parameters.length > 0) {\n    return (\n      <>\n        <ListItem button>\n          <ListItemText primary={action.label} onClick={() => setOpen(true)} />\n        </ListItem>\n        <ButtonActionPropsDialog open={open} action={action} onSubmit={handle_submit} onClose={handleClose}/>\n      </>\n    );\n  } else {\n    return (\n      <ListItem button  onClick={() => handle_action(actorid, action)}>\n        <ListItemText primary={action.label}   />\n      </ListItem>\n    );\n  }\n};\n\nconst ButtonActionDialog = ({ open, onClose, model, actor }) => {\n  const type = useActorType(actor.type);\n  const { actor: actorid } = model.props;\n\n  return (\n    <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <DialogTitle id=\"simple-dialog-title\">{model.name}</DialogTitle>\n      <List>\n        {type.actions.map((action, index) => (\n          <ActionButton actorid={actorid} action={action} key={index} />\n        ))}\n        <ListItem button color=\"secondary\">\n          <ListItemText primary=\"Close\" onClick={onClose} />\n        </ListItem>\n      </List>\n    </Dialog>\n  );\n};\n\nexport const DashboardButton = ({ id, width, height }) => {\n  const cbpi = useCBPi();\n  const model = useModel(id);\n  const draggable = useDraggable();\n  const actor = useActor(model.props?.actor);\n  const { actor: actorid, action } = model.props;\n  const [open, setOpen] = useState(false);\n  const [boom, setBoom] = useState(false)\n\n  const config = {\n    angle: 90,\n    spread: 360,\n    startVelocity: 40,\n    elementCount: 70,\n    dragFriction: 0.12,\n    duration: 3000,\n    stagger: 3,\n    width: \"10px\",\n    height: \"10px\",\n    perspective: \"500px\",\n    colors: [\"#a864fd\", \"#29cdff\", \"#78ff44\", \"#ff718d\", \"#fdff6a\"]\n  };\n\n  return useMemo(() => {\n    let cssStyle = { width: model.width + \"px\", height: model.height + \"px\" };\n    let btnColor = actor?.state ? \"primary\" : \"primary\";\n    let btnVariant = actor?.state ? \"contained\" : \"outlined\";\n    \n    const toggle = () => {\n      if (!draggable && model.props?.actor) {\n        cbpi.actions.toggle_actor(model.props?.actor);\n      }\n      setBoom(!boom)\n    };\n\n    const name = () => {\n      if (model.props?.actor && actor) {\n        return model.name;\n      } else {\n        return \"Missing Config\";\n      }\n    };\n\n    const handleClose = () => setOpen(false);\n    const handleOpen = () => setOpen(true);\n\n    if (action === \"yes\") {\n      return (\n        <div style={cssStyle}>\n          <ButtonGroup>\n            <Button disabled={draggable} onClick={toggle} fullWidth variant={btnVariant} color={btnColor}>\n              {name()}\n            </Button>\n            <Button disabled={draggable} onClick={handleOpen} color=\"primary\" size=\"small\" aria-label=\"select merge strategy\" aria-haspopup=\"menu\">\n              <MoreVertIcon />\n            </Button>\n          </ButtonGroup>\n          <ButtonActionDialog open={open} onClose={handleClose} model={model} actor={actor} />\n        </div>\n      );\n    } else {\n      return (\n        <div style={cssStyle}>\n          <Button disabled={draggable} onClick={toggle} fullWidth variant={btnVariant} color={btnColor}>\n            {name()}\n          </Button>\n         \n        </div>\n      );\n    }\n  }, [model.props?.actor, model.props?.action, model.name, actor, id, open, draggable]);\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/configapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/NewRecipeDialog.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/data/recipeapi.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Header.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/KettleTable.js",["437","438","439","440"],"import { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { CBPiContext, useCBPi } from '../data';\nimport { kettleapi } from '../data/kettleapi';\nimport ActorValue from '../util/ActorValue';\nimport DeleteDialog from '../util/DeleteDialog';\nimport SensorValue from '../util/SensorValue';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nconst KettleTable = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const { state, actions } = useCBPi()\n\n    const remove_callback = (id) => {\n        actions.delete_kettle(id)\n    }\n    return (\n        <>\n            <TableContainer >\n                <Table className={classes.table} dense table size=\"small\" aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Logic</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Heater</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Agitator</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Sensor</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Target Temp</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {state.kettle.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    \n                                        {row.name}\n                                    \n                                </TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.type}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><ActorValue id={row.heater}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\" ><ActorValue id={row.agitator}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><SensorValue id={row.sensor}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.target_temp}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">\n                                    <DeleteDialog title=\"Delete Kettle\" message=\"Do you want to delete\" id={row.id} callback={remove_callback} />\n                                    <IconButton aria-label=\"delete\" size=\"small\" onClick={() => { history.push(\"/kettle/\"+row.id) }} >\n                                      <VisibilityIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default  KettleTable","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/StepStateChip.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/hardware/ActorTable.js",["441","442"],"import { makeStyles } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport Link from '@material-ui/core/Link';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport VisibilityIcon from '@material-ui/icons/Visibility';\nimport React, { useContext } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { CBPiContext } from '../data';\nimport { actorapi } from '../data/actorapi';\nimport ActorButton from '../util/ActorButton';\nimport ActorSwitch from '../util/ActorSwitch';\nimport DeleteDialog from '../util/DeleteDialog';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\nconst ActorTable = () => {\n    const classes = useStyles();\n    const history = useHistory();\n    const { state, actions } = useContext(CBPiContext);\n\n    \n    \n    const remove_callback = (id) => {\n        actorapi.remove(id)\n        actions.delete_actor(id)\n    }\n    return (\n        <>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} dense={true} table size=\"small\" aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>Name</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Type</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">State</TableCell>\n                            <TableCell align=\"right\" className=\"hidden-xs\">Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {state.actors.map((row) => (\n                            <TableRow key={row.id}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    \n                                        {row.name}\n                                \n                                </TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">{row.type}</TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\"><ActorSwitch id={row.id}/></TableCell>\n                                <TableCell align=\"right\" className=\"hidden-xs\">\n                                    <DeleteDialog title=\"Delete Actir\" message=\"Do you want to delete the Actor\" id={row.id} callback={remove_callback} />\n                                    <IconButton aria-label=\"delete\" size=\"small\" onClick={() => { history.push(\"/actor/\"+row.id) }} >\n                                      <VisibilityIcon />\n                                    </IconButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </>\n    );\n}\n\nexport default  ActorTable","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/CloneRecipeDialog.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/MashStepList.js",["443"],"import { Accordion, AccordionDetails, AccordionSummary, Grid, Hidden, IconButton, TextField, Typography } from \"@material-ui/core\";\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\nimport DeleteIcon from \"@material-ui/icons/Delete\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\nimport { useEffect, useState } from \"react\";\nimport { useCBPi } from \"../data\";\nimport PropsEdit from \"../util/PropsEdit\";\nimport StepTypeSelect from \"../util/StepTypeSelect\";\nimport ReportProblemIcon from '@material-ui/icons/ReportProblem';\n\nconst MashStepLine = ({ item, items, setItems, onSelectType, handleInput, handleInputProps, index, remove }) => {\n  const { state } = useCBPi();\n  const [propsConfig, setPropsConfig] = useState(null);\n\n  useEffect(() => {\n    const type2 = state.stepTypes.find((i) => i.name === item.type);\n    if (type2 && type2.properties) {\n      setPropsConfig(type2?.properties);\n    }\n  }, [item.type]);\n\n  const onChangeProps = (name, value) => {\n    handleInputProps(index, name, value);\n  };\n\n  const onRemove = (event) => {\n    event.stopPropagation();\n    remove(index);\n  };\n\n  const move = function (array, index, delta) {\n    const values = [...array];\n    var newIndex = index + delta;\n    if (newIndex < 0 || newIndex === values.length) return; //Already at the top or bottom.\n    var indexes = [index, newIndex].sort(); //Sort the indixes\n    values.splice(indexes[0], 2, values[indexes[1]], values[indexes[0]]); //Replace from lowest index, two elements, reverting the order\n\n    setItems(values);\n  };\n\n  const move_up = (index) => {\n    move(items, index, -1);\n  };\n\n  const move_down = (index) => {\n    move(items, index, 1);\n  };\n\n  return (\n    <Accordion>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />} aria-controls=\"panel1a-content\" id=\"panel1a-header\">\n        <Grid container direction=\"row\" justify=\"space-between\" alignItems=\"center\">\n          <Grid item>\n            {!item.type ? <ReportProblemIcon color=\"secondary\" fontSize=\"small\"/>  : \"\"}\n            <Typography display=\"inline\">{item.name || \"NO NAME\"}</Typography> -{\" \"}\n            <Typography variant=\"subtitle2\" display=\"inline\" color=\"textSecondary\">\n              {item.type || \"NO TYPE\"}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <IconButton disabled={index === items.length-1}\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={(event) => {\n                event.stopPropagation();\n                move_down(index);\n              }}\n            >\n              <ArrowDownwardIcon />\n            </IconButton>\n            <IconButton\n              disabled={index === 0}\n              edge=\"end\"\n              aria-label=\"delete\"\n              onClick={(event) => {\n                event.stopPropagation();\n                move_up(index);\n              }}\n            >\n              <ArrowUpwardIcon />\n            </IconButton>\n            <IconButton edge=\"end\" aria-label=\"delete\" onClick={onRemove}>\n              <DeleteIcon />\n            </IconButton>\n          </Grid>\n        </Grid>\n      </AccordionSummary>\n\n      <AccordionDetails>\n        <Grid container spacing={3}>\n          <Grid item xs={12} lg={2}>\n            <TextField variant="standard"label=\"Name\" name=\"name\" onChange={(e) => handleInput(index, e)} value={item.name} fullWidth />\n          </Grid>\n          <Grid item xs={12} lg={2}>\n            <StepTypeSelect value={item.type} onChange={(e) => onSelectType(index, e.target.value)} />\n          </Grid>\n          <Hidden lgDown>\n            <Grid item xs={12} lg={8}/>\n          </Hidden>\n          <PropsEdit config={propsConfig} data={item?.props || {}} onChange={onChangeProps} />\n        </Grid>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport const MashStepList = ({ items = [], setItems }) => {\n\n  const handleInputProps = (index, name, value) => {\n    const values = [...items];\n    values[index].props[name] = value;\n    setItems([...values]);\n  };\n\n  const handleInput = (index, event) => {\n    const values = [...items];\n    values[index][event.target.name] = event.target.value;\n    setItems([...values]);\n  };\n\n  const handleSelectType = (index, value) => {\n    const values = [...items];\n    values[index].type = value;\n    values[index].props = {};\n    setItems([...values]);\n  };\n\n  const remove_entry = (index) => {\n    const values = [...items];\n    const filteredItems = values.slice(0, index).concat(values.slice(index + 1, values.length));\n    setItems(filteredItems);\n  };\n\n  const props = { items, setItems, remove: remove_entry, onSelectType: handleSelectType, handleInputProps, handleInput };\n\n  return items.map((item, index) => <MashStepLine {...props} item={item} index={index}  />);\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/recipes/BasicData.js",["444"],"import { TextField } from \"@material-ui/core\";\nimport { default as React, useState } from \"react\";\n\nexport const BasicData = ({data, setData}) => {\n\n\n  const handleChange = (event) => {\n    const values = {...data};\n    values[event.target.name] = event.target.value;\n    setData({...values});\n  }\n  return (\n    <>\n      <TextField variant="standard"fullWidth name=\"name\" value={data.name} onChange={handleChange}  id=\"name\" label=\"Name\" />\n      <TextField variant="standard"fullWidth name=\"author\" value={data.author} onChange={handleChange}  id=\"author\" label=\"Author\" />\n      <TextField variant="standard" name=\"desc\" fullWidth multiline value={data.desc} onChange={handleChange} id=\"desc\" label=\"Description\" />\n    </>\n  );\n};\n","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/StepTypeSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/LogicSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorTypeSelect.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorValue.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorSwitch.js",[],"/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/ActorButton.js",["445"],"import { Button } from \"@material-ui/core\";\nimport { useCBPi } from \"../data\";\n\n\n const ActorButton = ({label = \"Actor\", id, property=\"name\"}) => {\n    const { state, actions } = useCBPi()\n    const actor = state.actors.find(e => e.id === parseInt(id))\n    return actor ? (<Button>{actor.state ? \"ON\" : \"OFF\"}</Button>) : (<>Actor not found</>)\n}\n\nexport default ActorButton","/home/ubuntu/craftbeerpi4-ui/cbpi4ui/src/components/util/Title.js",[],{"ruleId":"446","replacedBy":"447"},{"ruleId":"448","replacedBy":"449"},{"ruleId":"450","severity":1,"message":"451","line":145,"column":19,"nodeType":"452","endLine":145,"endColumn":76},{"ruleId":"453","severity":1,"message":"454","line":77,"column":13,"nodeType":"455","messageId":"456","endLine":77,"endColumn":20},{"ruleId":"457","severity":1,"message":"458","line":84,"column":6,"nodeType":"459","endLine":84,"endColumn":8,"suggestions":"460"},{"ruleId":"453","severity":1,"message":"461","line":9,"column":5,"nodeType":"455","messageId":"456","endLine":9,"endColumn":16},{"ruleId":"453","severity":1,"message":"462","line":11,"column":7,"nodeType":"455","messageId":"456","endLine":11,"endColumn":19},{"ruleId":"453","severity":1,"message":"463","line":32,"column":19,"nodeType":"455","messageId":"456","endLine":32,"endColumn":29},{"ruleId":"453","severity":1,"message":"464","line":33,"column":16,"nodeType":"455","messageId":"456","endLine":33,"endColumn":23},{"ruleId":"457","severity":1,"message":"465","line":38,"column":21,"nodeType":"455","endLine":38,"endColumn":32},{"ruleId":"457","severity":1,"message":"466","line":92,"column":6,"nodeType":"459","endLine":92,"endColumn":8,"suggestions":"467"},{"ruleId":"457","severity":1,"message":"468","line":161,"column":6,"nodeType":"459","endLine":161,"endColumn":13,"suggestions":"469"},{"ruleId":"453","severity":1,"message":"470","line":166,"column":19,"nodeType":"455","messageId":"456","endLine":166,"endColumn":24},{"ruleId":"457","severity":1,"message":"471","line":71,"column":6,"nodeType":"459","endLine":71,"endColumn":8,"suggestions":"472"},{"ruleId":"457","severity":1,"message":"473","line":97,"column":6,"nodeType":"459","endLine":97,"endColumn":8,"suggestions":"474"},{"ruleId":"453","severity":1,"message":"475","line":14,"column":7,"nodeType":"455","messageId":"456","endLine":14,"endColumn":12},{"ruleId":"453","severity":1,"message":"476","line":70,"column":9,"nodeType":"455","messageId":"456","endLine":70,"endColumn":14},{"ruleId":"457","severity":1,"message":"477","line":122,"column":6,"nodeType":"459","endLine":122,"endColumn":8,"suggestions":"478"},{"ruleId":"457","severity":1,"message":"479","line":71,"column":6,"nodeType":"459","endLine":71,"endColumn":8,"suggestions":"480"},{"ruleId":"453","severity":1,"message":"481","line":4,"column":8,"nodeType":"455","messageId":"456","endLine":4,"endColumn":18},{"ruleId":"453","severity":1,"message":"482","line":5,"column":8,"nodeType":"455","messageId":"456","endLine":5,"endColumn":29},{"ruleId":"453","severity":1,"message":"483","line":5,"column":8,"nodeType":"455","messageId":"456","endLine":5,"endColumn":12},{"ruleId":"453","severity":1,"message":"484","line":9,"column":8,"nodeType":"455","messageId":"456","endLine":9,"endColumn":24},{"ruleId":"453","severity":1,"message":"485","line":1,"column":10,"nodeType":"455","messageId":"456","endLine":1,"endColumn":16},{"ruleId":"453","severity":1,"message":"486","line":10,"column":8,"nodeType":"455","messageId":"456","endLine":10,"endColumn":22},{"ruleId":"457","severity":1,"message":"487","line":52,"column":6,"nodeType":"459","endLine":52,"endColumn":14,"suggestions":"488"},{"ruleId":"453","severity":1,"message":"485","line":1,"column":10,"nodeType":"455","messageId":"456","endLine":1,"endColumn":16},{"ruleId":"453","severity":1,"message":"489","line":6,"column":8,"nodeType":"455","messageId":"456","endLine":6,"endColumn":15},{"ruleId":"453","severity":1,"message":"476","line":78,"column":9,"nodeType":"455","messageId":"456","endLine":78,"endColumn":14},{"ruleId":"457","severity":1,"message":"490","line":81,"column":6,"nodeType":"459","endLine":81,"endColumn":8,"suggestions":"491"},{"ruleId":"492","severity":1,"message":"493","line":88,"column":35,"nodeType":"494","messageId":"495","endLine":88,"endColumn":37},{"ruleId":"453","severity":1,"message":"476","line":21,"column":9,"nodeType":"455","messageId":"456","endLine":21,"endColumn":14},{"ruleId":"457","severity":1,"message":"496","line":47,"column":6,"nodeType":"459","endLine":47,"endColumn":25,"suggestions":"497"},{"ruleId":"457","severity":1,"message":"498","line":233,"column":6,"nodeType":"459","endLine":233,"endColumn":17,"suggestions":"499"},{"ruleId":"457","severity":1,"message":"500","line":294,"column":6,"nodeType":"459","endLine":294,"endColumn":34,"suggestions":"501"},{"ruleId":"457","severity":1,"message":"502","line":302,"column":6,"nodeType":"459","endLine":302,"endColumn":24,"suggestions":"503"},{"ruleId":"457","severity":1,"message":"468","line":310,"column":6,"nodeType":"459","endLine":310,"endColumn":15,"suggestions":"504"},{"ruleId":"457","severity":1,"message":"505","line":35,"column":6,"nodeType":"459","endLine":35,"endColumn":21,"suggestions":"506"},{"ruleId":"453","severity":1,"message":"507","line":3,"column":39,"nodeType":"455","messageId":"456","endLine":3,"endColumn":46},{"ruleId":"450","severity":1,"message":"451","line":64,"column":43,"nodeType":"452","endLine":64,"endColumn":137},{"ruleId":"453","severity":1,"message":"508","line":7,"column":10,"nodeType":"455","messageId":"456","endLine":7,"endColumn":23},{"ruleId":"453","severity":1,"message":"509","line":7,"column":25,"nodeType":"455","messageId":"456","endLine":7,"endColumn":37},{"ruleId":"453","severity":1,"message":"510","line":7,"column":39,"nodeType":"455","messageId":"456","endLine":7,"endColumn":53},{"ruleId":"453","severity":1,"message":"511","line":7,"column":69,"nodeType":"455","messageId":"456","endLine":7,"endColumn":82},{"ruleId":"453","severity":1,"message":"512","line":1,"column":36,"nodeType":"455","messageId":"456","endLine":1,"endColumn":59},{"ruleId":"453","severity":1,"message":"513","line":6,"column":8,"nodeType":"455","messageId":"456","endLine":6,"endColumn":22},{"ruleId":"453","severity":1,"message":"514","line":7,"column":8,"nodeType":"455","messageId":"456","endLine":7,"endColumn":20},{"ruleId":"453","severity":1,"message":"515","line":8,"column":8,"nodeType":"455","messageId":"456","endLine":8,"endColumn":32},{"ruleId":"453","severity":1,"message":"516","line":19,"column":8,"nodeType":"455","messageId":"456","endLine":19,"endColumn":22},{"ruleId":"453","severity":1,"message":"517","line":39,"column":10,"nodeType":"455","messageId":"456","endLine":39,"endColumn":15},{"ruleId":"453","severity":1,"message":"518","line":39,"column":17,"nodeType":"455","messageId":"456","endLine":39,"endColumn":25},{"ruleId":"457","severity":1,"message":"519","line":172,"column":6,"nodeType":"459","endLine":172,"endColumn":19,"suggestions":"520"},{"ruleId":"453","severity":1,"message":"521","line":6,"column":47,"nodeType":"455","messageId":"456","endLine":6,"endColumn":57},{"ruleId":"457","severity":1,"message":"522","line":36,"column":6,"nodeType":"459","endLine":36,"endColumn":13,"suggestions":"523"},{"ruleId":"453","severity":1,"message":"524","line":6,"column":13,"nodeType":"455","messageId":"456","endLine":6,"endColumn":20},{"ruleId":"453","severity":1,"message":"525","line":25,"column":10,"nodeType":"455","messageId":"456","endLine":25,"endColumn":17},{"ruleId":"453","severity":1,"message":"526","line":25,"column":19,"nodeType":"455","messageId":"456","endLine":25,"endColumn":29},{"ruleId":"453","severity":1,"message":"527","line":27,"column":10,"nodeType":"455","messageId":"456","endLine":27,"endColumn":17},{"ruleId":"453","severity":1,"message":"528","line":28,"column":20,"nodeType":"455","messageId":"456","endLine":28,"endColumn":29},{"ruleId":"453","severity":1,"message":"529","line":29,"column":9,"nodeType":"455","messageId":"456","endLine":29,"endColumn":18},{"ruleId":"453","severity":1,"message":"524","line":158,"column":10,"nodeType":"455","messageId":"456","endLine":158,"endColumn":17},{"ruleId":"457","severity":1,"message":"530","line":169,"column":6,"nodeType":"459","endLine":169,"endColumn":23,"suggestions":"531"},{"ruleId":"453","severity":1,"message":"524","line":250,"column":26,"nodeType":"455","messageId":"456","endLine":250,"endColumn":33},{"ruleId":"457","severity":1,"message":"532","line":27,"column":5,"nodeType":"459","endLine":27,"endColumn":7,"suggestions":"533"},{"ruleId":"457","severity":1,"message":"534","line":120,"column":6,"nodeType":"459","endLine":120,"endColumn":80,"suggestions":"535"},{"ruleId":"453","severity":1,"message":"536","line":1,"column":50,"nodeType":"455","messageId":"456","endLine":1,"endColumn":57},{"ruleId":"453","severity":1,"message":"537","line":12,"column":7,"nodeType":"455","messageId":"456","endLine":12,"endColumn":18},{"ruleId":"457","severity":1,"message":"538","line":35,"column":6,"nodeType":"459","endLine":35,"endColumn":52,"suggestions":"539"},{"ruleId":"540","severity":1,"message":"541","line":47,"column":181,"nodeType":"542","endLine":47,"endColumn":210},{"ruleId":"540","severity":1,"message":"541","line":49,"column":166,"nodeType":"542","endLine":49,"endColumn":195},{"ruleId":"543","severity":1,"message":"544","line":45,"column":32,"nodeType":"545","messageId":"546","endLine":45,"endColumn":34},{"ruleId":"446","replacedBy":"547"},{"ruleId":"448","replacedBy":"548"},{"ruleId":"453","severity":1,"message":"549","line":9,"column":8,"nodeType":"455","messageId":"456","endLine":9,"endColumn":16},{"ruleId":"453","severity":1,"message":"550","line":95,"column":18,"nodeType":"455","messageId":"456","endLine":95,"endColumn":25},{"ruleId":"453","severity":1,"message":"551","line":99,"column":9,"nodeType":"455","messageId":"456","endLine":99,"endColumn":15},{"ruleId":"457","severity":1,"message":"552","line":160,"column":6,"nodeType":"459","endLine":160,"endColumn":87,"suggestions":"553"},{"ruleId":"453","severity":1,"message":"554","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":13},{"ruleId":"453","severity":1,"message":"555","line":11,"column":17,"nodeType":"455","messageId":"456","endLine":11,"endColumn":27},{"ruleId":"453","severity":1,"message":"556","line":13,"column":10,"nodeType":"455","messageId":"456","endLine":13,"endColumn":21},{"ruleId":"453","severity":1,"message":"557","line":14,"column":10,"nodeType":"455","messageId":"456","endLine":14,"endColumn":19},{"ruleId":"453","severity":1,"message":"558","line":3,"column":8,"nodeType":"455","messageId":"456","endLine":3,"endColumn":12},{"ruleId":"453","severity":1,"message":"559","line":16,"column":8,"nodeType":"455","messageId":"456","endLine":16,"endColumn":19},{"ruleId":"457","severity":1,"message":"560","line":21,"column":6,"nodeType":"459","endLine":21,"endColumn":17,"suggestions":"561"},{"ruleId":"453","severity":1,"message":"562","line":2,"column":28,"nodeType":"455","messageId":"456","endLine":2,"endColumn":36},{"ruleId":"453","severity":1,"message":"524","line":6,"column":20,"nodeType":"455","messageId":"456","endLine":6,"endColumn":27},"no-native-reassign",["563"],"no-negated-in-lhs",["564"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'timerId' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'remove'. Either include it or remove the dependency array.","ArrayExpression",["565"],"'MQTTPattern' is assigned a value but never used.","'messageTypes' is assigned a value but never used.","'setPlugins' is assigned a value but never used.","'setTemp' is assigned a value but never used.","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","React Hook useEffect has a missing dependency: 'onMessage'. Either include it or remove the dependency array.",["566"],"React Hook useMemo has a missing dependency: 'actions'. Either include it or remove the dependency array.",["567"],"'state' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actor', 'id', and 'state.actorTypes'. Either include them or remove the dependency array.",["568"],"React Hook useEffect has missing dependencies: 'id', 'kettle', and 'state.logic'. Either include them or remove the dependency array.",["569"],"'props' is assigned a value but never used.","'alert' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'actions', 'id', and 'state.stepTypes'. Either include them or remove the dependency array.",["570"],"React Hook useEffect has missing dependencies: 'id', 'sensor', and 'state.sensorTypes'. Either include them or remove the dependency array.",["571"],"'DeleteIcon' is defined but never used.","'PlayCircleOutlineIcon' is defined but never used.","'logo' is defined but never used.","'CircularProgress' is defined but never used.","'Button' is defined but never used.","'AssignmentIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'totalList'. Either include it or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setList' needs the current value of 'totalList'.",["572"],"'AddIcon' is defined but never used.","React Hook useEffect has a missing dependency: 'state'. Either include it or remove the dependency array.",["573"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'pathes', 'remove', and 'selected'. Either include them or remove the dependency array.",["574"],"React Hook useEffect has a missing dependency: 'actions'. Either include it or remove the dependency array.",["575"],"React Hook useMemo has an unnecessary dependency: 'state.elements2'. Either exclude it or remove the dependency array.",["576"],"React Hook useMemo has a missing dependency: 'id'. Either include it or remove the dependency array.",["577"],["578"],"React Hook useEffect has a missing dependency: 'key'. Either include it or remove the dependency array.",["579"],"'useMemo' is defined but never used.","'CBPiGrainIcon' is defined but never used.","'CBPiHopsIcon' is defined but never used.","'CBPiLiquidIcon' is defined but never used.","'CBPiYeastIcon' is defined but never used.","'ListItemSecondaryAction' is defined but never used.","'CropSquareIcon' is defined but never used.","'CheckBoxIcon' is defined but never used.","'CheckBoxOutlineBlankIcon' is defined but never used.","'DragHandleIcon' is defined but never used.","'items' is assigned a value but never used.","'setItems' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'state.pathes'. Either include it or remove the dependency array.",["580"],"'CBPiKettle' is defined but never used.","React Hook useEffect has missing dependencies: 'id' and 'state.pathes'. Either include them or remove the dependency array.",["581"],"'actions' is assigned a value but never used.","'opacity' is assigned a value but never used.","'setOpacity' is assigned a value but never used.","'percent' is assigned a value but never used.","'setSensor' is assigned a value but never used.","'draggable' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'item.type'. Either include it or remove the dependency array.",["582"],"React Hook useEffect has a missing dependency: 'kettle?.target_temp'. Either include it or remove the dependency array. If 'setValue' needs the current value of 'kettle.target_temp', you can also switch to useReducer instead of useState and read 'kettle.target_temp' in the reducer.",["583"],"React Hook useMemo has missing dependencies: 'model.props.kettle', 'toggle', and 'toggle_kettle_logic'. Either include them or remove the dependency array.",["584"],"'Divider' is defined but never used.","'ContextMenu' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'load_data'. Either include it or remove the dependency array.",["585"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["563"],["564"],"'Confetti' is defined but never used.","'actorid' is assigned a value but never used.","'config' is assigned a value but never used.","React Hook useMemo has missing dependencies: 'action', 'boom', 'cbpi.actions', and 'model'. Either include them or remove the dependency array. You can also do a functional update 'setBoom(b => ...)' if you only need 'boom' in the 'setBoom' call.",["586"],"'Paper' is defined but never used.","'useContext' is defined but never used.","'CBPiContext' is defined but never used.","'kettleapi' is defined but never used.","'Link' is defined but never used.","'ActorButton' is defined but never used.","React Hook useEffect has a missing dependency: 'state.stepTypes'. Either include it or remove the dependency array.",["587"],"'useState' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"588","fix":"589"},{"desc":"590","fix":"591"},{"desc":"592","fix":"593"},{"desc":"594","fix":"595"},{"desc":"596","fix":"597"},{"desc":"598","fix":"599"},{"desc":"600","fix":"601"},{"desc":"602","fix":"603"},{"desc":"604","fix":"605"},{"desc":"606","fix":"607"},{"desc":"608","fix":"609"},{"desc":"610","fix":"611"},{"desc":"612","fix":"613"},{"desc":"592","fix":"614"},{"desc":"615","fix":"616"},{"desc":"617","fix":"618"},{"desc":"619","fix":"620"},{"desc":"621","fix":"622"},{"desc":"623","fix":"624"},{"desc":"625","fix":"626"},{"desc":"627","fix":"628"},{"desc":"629","fix":"630"},{"desc":"621","fix":"631"},"Update the dependencies array to be: [remove]",{"range":"632","text":"633"},"Update the dependencies array to be: [onMessage]",{"range":"634","text":"635"},"Update the dependencies array to be: [actions, state]",{"range":"636","text":"637"},"Update the dependencies array to be: [actor, id, state.actorTypes]",{"range":"638","text":"639"},"Update the dependencies array to be: [id, kettle, state.logic]",{"range":"640","text":"641"},"Update the dependencies array to be: [actions, id, state.stepTypes]",{"range":"642","text":"643"},"Update the dependencies array to be: [id, sensor, state.sensorTypes]",{"range":"644","text":"645"},"Update the dependencies array to be: [filter, totalList]",{"range":"646","text":"647"},"Update the dependencies array to be: [state]",{"range":"648","text":"649"},"Update the dependencies array to be: [delelteKeyPressed, pathes, remove, selected]",{"range":"650","text":"651"},"Update the dependencies array to be: [actions, parentRef]",{"range":"652","text":"653"},"Update the dependencies array to be: [state, id]",{"range":"654","text":"655"},"Update the dependencies array to be: [id, state.selected?.id]",{"range":"656","text":"657"},{"range":"658","text":"637"},"Update the dependencies array to be: [key, setKeyPressed]",{"range":"659","text":"660"},"Update the dependencies array to be: [selected_id, state.pathes]",{"range":"661","text":"662"},"Update the dependencies array to be: [actor, id, state.pathes]",{"range":"663","text":"664"},"Update the dependencies array to be: [item.type, state.stepTypes]",{"range":"665","text":"666"},"Update the dependencies array to be: [kettle?.target_temp]",{"range":"667","text":"668"},"Update the dependencies array to be: [model.props?.orientation, model.props.kettle, kettle, heater, state.draggable, agitator, open, toggle, toggle_kettle_logic]",{"range":"669","text":"670"},"Update the dependencies array to be: [model.props.sensor, model.props?.refresh, load_data]",{"range":"671","text":"672"},"Update the dependencies array to be: [model, actor, action, draggable, boom, cbpi.actions, open]",{"range":"673","text":"674"},{"range":"675","text":"666"},[2324,2326],"[remove]",[3014,3016],"[onMessage]",[5974,5981],"[actions, state]",[2030,2032],"[actor, id, state.actorTypes]",[2664,2666],"[id, kettle, state.logic]",[3042,3044],"[actions, id, state.stepTypes]",[2038,2040],"[id, sensor, state.sensorTypes]",[1511,1519],"[filter, totalList]",[2589,2591],"[state]",[1860,1879],"[delelteKeyPressed, pathes, remove, selected]",[6832,6843],"[actions, parentRef]",[8743,8771],"[state, id]",[8956,8974],"[id, state.selected?.id]",[9165,9174],[1026,1041],"[key, setKeyPressed]",[5949,5962],"[selected_id, state.pathes]",[1303,1310],"[actor, id, state.pathes]",[5589,5606],"[item.type, state.stepTypes]",[1145,1147],"[kettle?.target_temp]",[4351,4425],"[model.props?.orientation, model.props.kettle, kettle, heater, state.draggable, agitator, open, toggle, toggle_kettle_logic]",[1258,1304],"[model.props.sensor, model.props?.refresh, load_data]",[5090,5171],"[model, actor, action, draggable, boom, cbpi.actions, open]",[995,1006]]